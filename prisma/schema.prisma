// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  userTypeId  Int?
  surname     String  @db.VarChar(255)
  otherNames  String  @db.VarChar(255)
  email       String? @db.VarChar(255)
  phoneNumber String  @db.VarChar(255)
  password    String  @db.VarChar(255)
  // idTypeId    Int?
  // idNumber    String? @db.VarChar(255)
  regionId    Int?
  districtId  Int?

  Region    Region?   @relation(fields: [regionId], references: [id])
  District  District? @relation(fields: [districtId], references: [id])
  activated Int?      @default(0)
  deleted   Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  UserType  UserType? @relation(fields: [userTypeId], references: [id])
  UserLevel UserLevel @relation(fields: [userLevelId], references: [id])

  Logs        Logs[]
  submittedBy Inspection[] @relation("submittedBy")
  publishedBy Inspection[] @relation("publishedBy")
  userLevelId Int
}

model UserLevel {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model UserType {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  User             User[]
  PageAccess       PageAccess[]
  PageActionAccess PageActionAccess[]
}

model PageAccess {
  id         Int      @id @default(autoincrement())
  pageId     Int
  userTypeId Int
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Page       Page     @relation(fields: [pageId], references: [id])
  UserType   UserType @relation(fields: [userTypeId], references: [id])
}

model PageActionAccess {
  id           Int @id @default(autoincrement())
  userTypeId   Int
  pageActionId Int

  deleted    Int?       @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  PageAction PageAction @relation(fields: [pageActionId], references: [id])
  UserType   UserType   @relation(fields: [userTypeId], references: [id])
}

model Page {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  path String @db.VarChar(255)

  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PageAction PageAction[]
  PageAccess PageAccess[]
}

model PageAction {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Page             Page[]
  PageActionAccess PageActionAccess[]
}

model CemeteryWorkers {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WasteWaterContainment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

///////////////////////////XXX//////////////////////////////

// model AnimalRearing {
//   id Int @id @default(autoincrement())

// }

// educational
// religious
// corporate

// model EducationInstitutionPremises {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)

//   deleted                      Int?        @default(0)
//   createdAt                    DateTime    @default(now())
//   updatedAt                    DateTime    @updatedAt
//   educationalInstitutionType   Institution @relation(fields: [educationalInstitutionTypeId], references: [id])
//   educationalInstitutionTypeId Int
// }

// model CorporateInstitutionPremises {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)

//   deleted                  Int?        @default(0)
//   createdAt                DateTime    @default(now())
//   updatedAt                DateTime    @updatedAt
//   corporateInstitutionType Institution @relation(fields: [corporateInstitutionTypeId], references: [id])

//   corporateInstitutionTypeId Int
// }

// model ReligiousInstitutionPremises {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)

//   deleted                  Int?        @default(0)
//   createdAt                DateTime    @default(now())
//   updatedAt                DateTime    @updatedAt
//   religiousInstitutionType Institution @relation(fields: [religiousInstitutionTypeId], references: [id])
//   ablutionSlab             YesNo?      @relation("ablutionSlab", fields: [ablutionSlabId], references: [id])

//   religiousInstitutionTypeId Int
//   ablutionSlabId             Int?
// }

// model Institution {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(255)

//   deleted           Int?            @default(0)
//   createdAt         DateTime        @default(now())
//   updatedAt         DateTime        @updatedAt
//   InstitutionType   InstitutionType @relation(fields: [institutionTypeId], references: [id])
//   institutionTypeId Int
// }

/////////////////////START DEFAULT SEEDED DATA ///////////////////////////

// model InstitutionType {
//   id                  Int                  @id @default(autoincrement())
//   name                String               @db.VarChar(255)
//   InstitutionCategory InstitutionCategory? @relation(fields: [categoryId], references: [id])
//   deleted             Int?                 @default(0)
//   createdAt           DateTime             @default(now())
//   updatedAt           DateTime             @updatedAt
//   categoryId          Int?
// }
model RespondentDesignation {
  id               Int    @id @default(autoincrement())
  name             String @db.VarChar(255)
  inspectionFormId Int

  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  InspectionForm  InspectionForm    @relation(fields: [inspectionFormId], references: [id])
  FacilitySection FacilitySection[]
  // PremisesSubtype   PremisesSubtype?  @relation(fields: [premisesSubtypeId], references: [id])
  // premisesSubtypeId Int?
}

model InspectionForm {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]
  Facility   Facility[]

  RespondentDesignation RespondentDesignation[]
  Type                  Type[]
  Subtype               Subtype[]
  Service               Service[]
}

// model Role {
//   id        Int      @id @default(autoincrement())
//   name      String   @db.VarChar(255)
//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Region {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  abbrv String @db.VarChar(10)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model District {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacilitySection FacilitySection[]
  User            User[]
}

model Community {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacilitySection FacilitySection[]
}

model Subdistrict {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacilitySection FacilitySection[]
}

model Zone {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacilitySection FacilitySection[]
}

model Frequency {
  id        Int      @id @default(autoincrement())
  name      String
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SolidWasteSection SolidWasteSection[]
  WaterSection      WaterSection[]
}

model ToiletType {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PremisesToiletType PremisesToiletType[]
}

model AnalCleansingMaterialMgt {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
}

model EffluentManagement {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  LiquidWasteSection         LiquidWasteSection[]
  PremisesEffluentManagement PremisesEffluentManagement[]
}

model ExcretaContainment {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  LiquidWasteSection         LiquidWasteSection[]
  PremisesExcretaContainment PremisesExcretaContainment[]
}

model ExcretaDisposalMethod {
  id                            Int                             @id @default(autoincrement())
  name                          String                          @db.VarChar(255)
  deleted                       Int?                            @default(0)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  LiquidWasteSection            LiquidWasteSection[]
  PremisesExcretaDisposalMethod PremisesExcretaDisposalMethod[]
}

model WaterSourceType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  deleted              Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  PremisesWaterSources PremisesWaterSources[]
}

model DrinkingWaterSourceType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaterSupplyType {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model WaterStorageType {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model WaterTreatmentType {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model SolidWasteReceptacle {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PremisesWasteReceptacle PremisesWasteReceptacle[]
}

model YesNo {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availToiletFaciltyMgt                   PremisesWashroomFacility[] @relation("availToiletFaciltyMgt")
  toiletGenderSensivity                   PremisesWashroomFacility[] @relation("toiletGenderSensivity")
  urinalGenderSensivity                   PremisesWashroomFacility[] @relation("urinalGenderSensivity")
  toiletDisabilityFriendly                PremisesWashroomFacility[] @relation("toiletDisabilityFriendly")
  urinalDisabilityFriendly                PremisesWashroomFacility[] @relation("urinalDisabilityFriendly")
  approvedHandwashingFacilityAvailability FacilitySection[]          @relation("approvedHandwashingFacilityAvailability")
  facilityCleanliness                     FacilitySection[]          @relation("facilityCleanliness")
  toiletAdequacy                          PremisesWashroomFacility[] @relation("toiletAdequacy")
  urinalAdequacy                          PremisesWashroomFacility[] @relation("urinalAdequacy")

  businessLicenceAvailability       LicencePermitSection[] @relation("businessLicenceAvailability")
  medicalCertificateAvailability    LicencePermitSection[] @relation("medicalCertificateAvailability")
  operatingLicenceAvailability      LicencePermitSection[] @relation("operatingLicenceAvailability")
  propertyRateAvailability          LicencePermitSection[] @relation("propertyRateAvailability")
  structurePermitAvailability       LicencePermitSection[] @relation("structurePermitAvailability")
  habitationCertificateAvailability LicencePermitSection[] @relation("habitationCertificateAvailability")
  fumigationCertificateAvailability LicencePermitSection[] @relation("fumigationCertificateAvailability")
  buildingPermitAvailability        LicencePermitSection[] @relation("buildingPermitAvailability")
  pantryAvailability                FacilitySection[]      @relation("pantryAvailability")
  scheduledCollection               CommunalContainer[]    @relation("scheduledCollection")
  containerCondition                CommunalContainer[]    @relation("containerCondition")

  effluentManagementReport LiquidWasteSection[] @relation("effluentManagementReport")
  separateWard             FacilitySection[]    @relation("separateWard")

  sextonAvailability       Cemetery[] @relation("sextonAvailability")
  sextonOfficeAvailability Cemetery[] @relation("sextonOfficeAvailability")
  layoutCemeteryAdequacy   Cemetery[] @relation("layoutCemeteryAdequacy")
  cemeteryFenced           Cemetery[] @relation("cemeteryFenced")
  cremationPracticed       Cemetery[] @relation("cremationPracticed")
  cremationPlatform        Cemetery[] @relation("cremationPlatform")
  ashesDisposal            Cemetery[] @relation("ashesDisposal")

  protectiveClothing   FacilitySection[] @relation("protectiveClothing")
  firstAidAvailability FacilitySection[] @relation("firstAidAvailability")
  drainsAvailability   FacilitySection[] @relation("drainsAvailability")
  toiletAvailability   FacilitySection[] @relation("toiletAvailability")
  urinalAvailability   FacilitySection[] @relation("urinalAvailability")
  bathRoomAvailability FacilitySection[] @relation("bathRoomAvailability")

  evidenceStagnation        LiquidWasteSection[]   @relation("evidenceStagnation")
  disinfection              FacilitySection[]      @relation("disinfection")
  disinfestation            FacilitySection[]      @relation("disinfestation")
  safeConditionUncooked     HygieneSection[]       @relation("safeConditionUncooked")
  safeConditionCooked       HygieneSection[]       @relation("safeConditionCooked")
  publicBathRoomCondition   LiquidWasteSection[]   @relation("publicBathRoomCondition")
  animalsPermitAvailability LicencePermitSection[] @relation("animalsPermitAvailability")
  vaccinationProof          HygieneSection[]       @relation("vaccinationProof")
  animalSpaceCondition      HygieneSection[]       @relation("animalSpaceCondition")
  shepClubExistence         FacilitySection[]      @relation("shepClubExistence")

  soundProof         FacilitySection[] @relation("soundProof")
  disabilityFriendly FacilitySection[] @relation("disabilityFriendly")
  multipleExit       FacilitySection[] @relation("multipleExit")

  slaughterRoomsAvailable               SlaughterHouse[]       @relation("slaughterRoomsAvailable")
  condemnationRoomAvailable             SlaughterHouse[]       @relation("condemnationRoomAvailable")
  hangingExaminationFacilitiesAvailable SlaughterHouse[]       @relation("hangingExaminationFacilitiesAvailable")
  holdingPenAvailable                   SlaughterHouse[]       @relation("holdingPenAvailable")
  isolationPenAvailable                 SlaughterHouse[]       @relation("isolationPenAvailable")
  chuteAvailable                        SlaughterHouse[]       @relation("chuteAvailable")
  comfortRoomAvailable                  SlaughterHouse[]       @relation("comfortRoomAvailable")
  genderFriendlyAvailable               SlaughterHouse[]       @relation("genderFriendlyAvailable")
  wheelBathAvailable                    SlaughterHouse[]       @relation("wheelBathAvailable")
  footbathAvailable                     SlaughterHouse[]       @relation("footbathAvailable")
  meatInspectorOfficeAvailable          SlaughterHouse[]       @relation("meatInspectorOfficeAvailable")
  dressingFloorAvailable                SlaughterHouse[]       @relation("dressingFloorAvailable")
  // wasteSorting                          TransferWasteStation[] @relation("wasteSorting")
  leachateManagement                    TransferWasteStation[] @relation("leachateManagement")
  hazardousManagement                   TransferWasteStation[] @relation("hazardousManagement")
  labourersOfficeAvailability           FacilitySection[]      @relation("labourersOfficeAvailability")
  storeRoomAvailability                 FacilitySection[]      @relation("smokingArea")
  smokingArea                           FacilitySection[]      @relation("storeRoomAvailability")

  wasteCollectorRegistration SolidWasteSection[]  @relation("wasteCollectorRegistration")
  pondingEvidence            LiquidWasteSection[] @relation("pondingEvidence")

  waterCondition               WaterSection[] @relation("waterCondition")
  waterStorageConditionSafe    WaterSection[] @relation("waterStorageConditionSafe")
  distanceWaterStorageSanitary WaterSection[] @relation("distanceWaterStorageSanitary")

  adequateWasteStorageReceptacle SolidWasteSection[] @relation("adequateWasteStorageReceptacle")

  approvedWasteStorageReceptacle SolidWasteSection[]  @relation("approvedWasteStorageReceptacle")
  wasteSorting                   SolidWasteSection[]  @relation("wasteSorting")
  drainsCondition                LiquidWasteSection[] @relation("drainsCondition")
  receiptsUpToDate               SolidWasteSection[]  @relation("receiptsUpToDate")

  obnoxiousTradeNearby     ConclusionSection[]        @relation("obnoxiousTradeNearby")
  //pantryFacilityAdequacy     FacilitySection[]            @relation("pantryFacilityAdequacy")
  bathroomAdequacy         PremisesWashroomFacility[] @relation("bathroomAdequacy")
  IndustryPremisesSpecific IndustryPremisesSpecific[]
  separateStaffUrinal      PremisesWashroomFacility[] @relation("separateStaffUrinal")
  facilityConnectedSewer   LiquidWasteSection[]       @relation("facilityConnectedSewer")
  animalAvailability       FacilitySection[]          @relation("animalAvailability")

  HygieneSection HygieneSection[]
}

//new
model HazardousWasteDisposalMethod {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StorageCondition {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WasteCollectionType {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  deleted                 Int?                      @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  PremisesWasteCollection PremisesWasteCollection[]
}

model PestSign {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PremisesPestSigns PremisesPestSigns[]
}

model DrainType {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
}

model Nuisance {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(255)
  deleted                  Int?                       @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  PremisesNuisanceDetected PremisesNuisanceDetected[]
}

model Action {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  deleted             Int?                  @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PremisesActionTaken PremisesActionTaken[]
}

model GreyWaterDisposal {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  deleted                   Int?                        @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  PremisesGreyWaterDisposal PremisesGreyWaterDisposal[]
}

//Baseline inspection, reinspection

model InspectionType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]
}

model ToiletPitPosition {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(255)
  deleted                  Int?                       @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  PremisesWashroomFacility PremisesWashroomFacility[]
}

/////////////////////START DEFAULT SEEDED DATA ///////////////////////////

model Logs {
  id        Int      @id @default(autoincrement())
  userId    Int
  activity  String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Facility {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
}

// model Service {
//   id               Int            @id @default(autoincrement())
//   name             String         @db.VarChar(255)
//   deleted          Int?           @default(0)
//   createdAt        DateTime       @default(now())
//   updatedAt        DateTime       @updatedAt
//   InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
//   inspectionFormId Int
// }

///////////FACILITY SECTION/////////////////
model Inspection {
  id               Int      @id @default(autoincrement())
  inspectionCode   String   @db.VarChar(255)
  inspectionFormId Int
  inspectionTypeId Int
  isPublished      Int      @default(0)
  publishedById    Int?
  submittedById    Int
  publishedBy      User?    @relation("publishedBy", fields: [publishedById], references: [id])
  deleted          Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  FacilitySection      FacilitySection[]
  PopulationSection    PopulationSection[]
  WaterSection         WaterSection[]
  LiquidWasteSection   LiquidWasteSection[]
  SolidWasteSection    SolidWasteSection[]
  LicencePermitSection LicencePermitSection[]

  ConclusionSection ConclusionSection[]
  Picture           Picture[]
  InspectionForm    InspectionForm      @relation(fields: [inspectionFormId], references: [id])
  InspectionType    InspectionType      @relation(fields: [inspectionTypeId], references: [id])
  submittedBy       User                @relation("submittedBy", fields: [submittedById], references: [id])

  HygieneSection HygieneSection[]
}

model FacilitySection {
  id                                        Int     @id @default(autoincrement())
  inspectionId                              Int
  name                                      String  @db.VarChar(255)
  districtId                                Int
  subdistrictId                             Int?
  zoneId                                    Int?
  communityId                               Int?
  community                                 String  @db.VarChar(255)
  ghanaPostGps                              String? @db.VarChar(255)
  latitude                                  String  @db.VarChar(255)
  longitude                                 String  @db.VarChar(255)
  respondentName                            String  @db.VarChar(255)
  phoneNumber                               String  @db.VarChar(255)
  premiseTypeId                             Int
  respondentDesignationId                   Int
  approvedHandwashingFacilityAvailabilityId Int
  protectiveClothingId                      Int?
  firstAidAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathRoomAvailabilityId                    Int?
  separateWardId                            Int?
  soundProofId                              Int?
  disabilityFriendlyId                      Int?
  multipleExitId                            Int?
  labourersOfficeAvailabilityId             Int?
  storeRoomAvailabilityId                   Int?
  facilityCleanlinessId                     Int?
  animalAvailabilityId                      Int?
  // pantryFacilityAdequacyId                  Int?
  shepClubExistenceId                       Int?
  animalType                                String? @db.VarChar(255)
  disinfestationId                          Int?
  disinfectionId                            Int?
  eateryTypeId                              Int?
  eateryPremisesTypeId                      Int?
  temporaryPermanentId                      Int?
  smokingAreaId                             Int?
  pantryAvailabilityId                      Int?
  healthPremisesTypeId                      Int?

  marketLorryParkPremisesId Int?
  ownershipTypeId           Int?

  deleted             Int?     @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  facilityCleanliness YesNo?   @relation("facilityCleanliness", fields: [facilityCleanlinessId], references: [id])
  separateWard        YesNo?   @relation("separateWard", fields: [separateWardId], references: [id])
  smokingArea         YesNo?   @relation("smokingArea", fields: [smokingAreaId], references: [id])
  pantryAvailability  YesNo?   @relation("pantryAvailability", fields: [pantryAvailabilityId], references: [id])

  RespondentDesignation       RespondentDesignation @relation(fields: [respondentDesignationId], references: [id])
  Community                   Community?            @relation(fields: [communityId], references: [id])
  District                    District              @relation(fields: [districtId], references: [id])
  Subdistrict                 Subdistrict?          @relation(fields: [subdistrictId], references: [id])
  Zone                        Zone?                 @relation(fields: [zoneId], references: [id])
  Inspection                  Inspection            @relation(fields: [inspectionId], references: [id])
  labourersOfficeAvailability YesNo?                @relation("labourersOfficeAvailability", fields: [labourersOfficeAvailabilityId], references: [id])
  storeRoomAvailability       YesNo?                @relation("storeRoomAvailability", fields: [storeRoomAvailabilityId], references: [id])
  protectiveClothing          YesNo?                @relation("protectiveClothing", fields: [protectiveClothingId], references: [id])
  firstAidAvailability        YesNo?                @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  drainsAvailability          YesNo?                @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability          YesNo?                @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability          YesNo?                @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  bathRoomAvailability        YesNo?                @relation("bathRoomAvailability", fields: [bathRoomAvailabilityId], references: [id])
  soundProof                  YesNo?                @relation("soundProof", fields: [soundProofId], references: [id])
  disabilityFriendly          YesNo?                @relation("disabilityFriendly", fields: [disabilityFriendlyId], references: [id])
  multipleExit                YesNo?                @relation("multipleExit", fields: [multipleExitId], references: [id])
  animalAvailability          YesNo?                @relation("animalAvailability", fields: [animalAvailabilityId], references: [id])

  physicalStructure TemporaryPermanent? @relation(fields: [temporaryPermanentId], references: [id])

  MarketLorryParkPremises MarketLorryParkPremises? @relation(fields: [marketLorryParkPremisesId], references: [id])

  shepClubExistence                       YesNo? @relation("shepClubExistence", fields: [shepClubExistenceId], references: [id])
  // pantryFacilityAdequacy                  YesNo? @relation("pantryFacilityAdequacy", fields: [pantryFacilityAdequacyId], references: [id])
  approvedHandwashingFacilityAvailability YesNo? @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])

  disinfection      YesNo? @relation("disinfection", fields: [disinfectionId], references: [id])
  disinfestation    YesNo? @relation("disinfestation", fields: [disinfestationId], references: [id])
  institutionTypeId Int?
}

model LicencePermitSection {
  id                                  Int  @id @default(autoincrement())
  inspectionId                        Int
  businessLicenceAvailabilityId       Int?
  medicalCertAvailabilityId           Int?
  operatingLicenceAvailabilityId      Int?
  propertyRateAvailabilityId          Int?
  structurePermitAvailabilityId       Int?
  habitationCertificateAvailabilityId Int?
  fumigationCertificateAvailabilityId Int?
  medicalCertificateAvailabilityId    Int?
  buildingPermitAvailabilityId        Int?
  animalsPermitAvailabilityId         Int?

  deleted                   Int?     @default(0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  animalsPermitAvailability YesNo?   @relation("animalsPermitAvailability", fields: [animalsPermitAvailabilityId], references: [id])

  businessLicenceAvailability       YesNo?     @relation("businessLicenceAvailability", fields: [businessLicenceAvailabilityId], references: [id])
  medicalCertificateAvailability    YesNo?     @relation("medicalCertificateAvailability", fields: [medicalCertAvailabilityId], references: [id])
  operatingLicenceAvailability      YesNo?     @relation("operatingLicenceAvailability", fields: [operatingLicenceAvailabilityId], references: [id])
  propertyRateAvailability          YesNo?     @relation("propertyRateAvailability", fields: [propertyRateAvailabilityId], references: [id])
  structurePermitAvailability       YesNo?     @relation("structurePermitAvailability", fields: [structurePermitAvailabilityId], references: [id])
  habitationCertificateAvailability YesNo?     @relation("habitationCertificateAvailability", fields: [habitationCertificateAvailabilityId], references: [id])
  fumigationCertificateAvailability YesNo?     @relation("fumigationCertificateAvailability", fields: [fumigationCertificateAvailabilityId], references: [id])
  buildingPermitAvailability        YesNo?     @relation("buildingPermitAvailability", fields: [buildingPermitAvailabilityId], references: [id])
  Inspection                        Inspection @relation(fields: [inspectionId], references: [id])
}

model OwnershipType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TemporaryPermanent {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FacilitySection FacilitySection[]
}

model MarketLorryParkPremises {
  id Int @id @default(autoincrement())

  derattingFrequencyId  Int?
  deleted               Int?                @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  MarketLorryParkType   MarketLorryParkType @relation(fields: [marketLorryParkTypeId], references: [id])
  DerattingFrequency    DerattingFrequency? @relation(fields: [derattingFrequencyId], references: [id])
  FacilitySection       FacilitySection[]
  marketLorryParkTypeId Int
}

model MarketLorryParkType {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  deleted                 Int?                      @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  MarketLorryParkPremises MarketLorryParkPremises[]
}

model DerattingFrequency {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  deleted                 Int?                      @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  MarketLorryParkPremises MarketLorryParkPremises[]
}

////////////END SECTION ///////////

////////////POPULATION SECTION ///////////
model PopulationSection {
  id           Int @id @default(autoincrement())
  inspectionId Int

  animalsNumber Int? @default(0)

  maleDoctorsNumber                         Int?
  femaleDoctorsNumber                       Int?
  maleNursesNumber                          Int?
  femaleNursesNumber                        Int?
  maleAuxiliaryStaffNumber                  Int?
  femaleAuxiliaryStaffNumber                Int?
  roomCapacity                              Int?
  facilityCapacity                          Int?
  numberStores                              Int?
  numberStalls                              Int?
  numberSheds                               Int?
  numberVehicles                            Int?
  maleWorkers                               Int?
  femaleWorkers                             Int?
  medicallyCertifiedWorkers                 Int?
  numberMaleTeachers                        Int?
  numberFemaleTeachers                      Int?
  numberMaleNonTeachingStaff                Int?
  numberFemaleNonTeachingStaff              Int?
  numberMaleStudents                        Int?
  numberFemaleStudents                      Int?
  numberFemaleSchoolCooks                   Int?
  numberCooksMedicallyCertified             Int?
  numberFoodVendorsCompound                 Int?
  numberFoodVendorsMedicallyCertified       Int?
  numberPreschoolTeachersMedicallyCertified Int?

  numberHousehold       Int?
  numberMales           Int?
  numberFemales         Int?
  numberRooms           Int?
  numberBeds            Int?
  staffRoomAvailability Int?
  deleted               Int?       @default(0)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  Inspection            Inspection @relation(fields: [inspectionId], references: [id])
}

////////////END SECTION ///////////

////////////////////WATER SECTION ///////////
model WaterSection {
  id           Int @id @default(autoincrement())
  inspectionId Int

  waterConditionId               Int
  waterSupplyTypeId              Int
  waterStorageTypeId             Int
  waterTreatmentTypeId           Int
  waterFlowFrequencyId           Int
  waterStorageConditionSafeId    Int
  distanceWaterStorageSanitaryId Int?

  waterGeneralRating Int

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Inspection                   Inspection         @relation(fields: [inspectionId], references: [id])
  Frequency                    Frequency          @relation(fields: [waterFlowFrequencyId], references: [id])
  waterSupplyType              WaterSupplyType    @relation(fields: [waterSupplyTypeId], references: [id])
  waterStorageType             WaterStorageType   @relation(fields: [waterStorageTypeId], references: [id])
  WaterTreatmentType           WaterTreatmentType @relation(fields: [waterTreatmentTypeId], references: [id])
  waterCondition               YesNo              @relation("waterCondition", fields: [waterConditionId], references: [id])
  waterStorageConditionSafe    YesNo              @relation("waterStorageConditionSafe", fields: [waterStorageConditionSafeId], references: [id])
  distanceWaterStorageSanitary YesNo?             @relation("distanceWaterStorageSanitary", fields: [distanceWaterStorageSanitaryId], references: [id])

  PremisesWaterSources PremisesWaterSources[]
}

model PremisesWaterSources {
  id             Int @id @default(autoincrement())
  waterSectionId Int
  waterSourceId  Int

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WaterSourceType WaterSourceType @relation(fields: [waterSourceId], references: [id])
  WaterSection    WaterSection    @relation(fields: [waterSectionId], references: [id])
}

////////////END SECTION ///////////

////////////////////SANITATION SECTION ///////////

model LiquidWasteSection {
  id                         Int      @id @default(autoincrement())
  inspectionId               Int
  //sanitaryFacilityTypeId           Int
  evidenceStagnationId       Int?
  pondingEvidenceId          Int?
  drainsConditionId          Int?
  drainTypeId                Int?
  analCleansingMaterialMgtId Int?
  effluentManagementReportId Int?
  //facilityCleanlinessId      Int?
  effluentManagementId       Int?
  excretaDisposalMethodId    Int?
  excretaContainmentId       Int?
  publicBathRoomConditionId  Int?
  areaSewered                Int?
  facilityConnectedSewerId   Int?
  deleted                    Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  Inspection               Inspection                 @relation(fields: [inspectionId], references: [id])
  facilityConnectedSewer   YesNo?                     @relation("facilityConnectedSewer", fields: [facilityConnectedSewerId], references: [id])
  DrainType                DrainType?                 @relation(fields: [drainTypeId], references: [id])
  effluentManagementReport YesNo?                     @relation("effluentManagementReport", fields: [effluentManagementReportId], references: [id])
  drainsCondition          YesNo?                     @relation("drainsCondition", fields: [drainsConditionId], references: [id])
  analCleansingMgt         AnalCleansingMaterialMgt?  @relation(fields: [analCleansingMaterialMgtId], references: [id])
  // SlaughterHouse                 SlaughterHouse[]
  // Cemetery                       Cemetery[]
  // TransferWasteStation           TransferWasteStation[]
  // CommunalContainer              CommunalContainer[]
  PremisesWashroomFacility PremisesWashroomFacility[]
  EffluentManagement       EffluentManagement?        @relation(fields: [effluentManagementId], references: [id])
  ExcretaContainment       ExcretaContainment?        @relation(fields: [excretaContainmentId], references: [id])
  ExcretaDisposalMethod    ExcretaDisposalMethod?     @relation(fields: [excretaDisposalMethodId], references: [id])

  PremisesGreyWaterDisposal PremisesGreyWaterDisposal[]
  evidenceStagnation        YesNo?                      @relation("evidenceStagnation", fields: [evidenceStagnationId], references: [id])
  pondingEvidence           YesNo?                      @relation("pondingEvidence", fields: [pondingEvidenceId], references: [id])

  publicBathRoomCondition YesNo? @relation("publicBathRoomCondition", fields: [publicBathRoomConditionId], references: [id])
}

model PremisesWashroomFacility {
  id Int @id @default(autoincrement())

  numberToiletSeats Int?
  numberUrineSeats  Int?
  toiletAdequacyId  Int?
  urinalAdequacyId  Int?

  bathroomAdequacyId    Int?
  separateStaffUrinalId Int?

  availToiletFaciltyMgtId    Int?
  toiletGenderSensivityId    Int?
  urinalGenderSensivityId    Int?
  toiletDisabilityFriendlyId Int?
  urinalDisabilityFriendlyId Int?
  toiletPitPositionId        Int?
  liquidWasteSectionId       Int?

  premisesToiletTypeId            Int?
  premisesEffluentManagementId    Int?
  premisesExcretaDisposalMethodId Int?
  premisesExcretaContainmentId    Int?

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  separateStaffUrinal      YesNo?              @relation("separateStaffUrinal", fields: [separateStaffUrinalId], references: [id])
  bathroomAdequacy         YesNo?              @relation("bathroomAdequacy", fields: [bathroomAdequacyId], references: [id])
  toiletAdequacy           YesNo?              @relation("toiletAdequacy", fields: [toiletAdequacyId], references: [id])
  urinalAdequacy           YesNo?              @relation("urinalAdequacy", fields: [urinalAdequacyId], references: [id])
  toiletDisabilityFriendly YesNo?              @relation("toiletDisabilityFriendly", fields: [toiletDisabilityFriendlyId], references: [id])
  urinalDisabilityFriendly YesNo?              @relation("urinalDisabilityFriendly", fields: [urinalDisabilityFriendlyId], references: [id])
  availToiletFaciltyMgt    YesNo?              @relation("availToiletFaciltyMgt", fields: [availToiletFaciltyMgtId], references: [id])
  toiletGenderSensivity    YesNo?              @relation("toiletGenderSensivity", fields: [toiletGenderSensivityId], references: [id])
  urinalGenderSensivity    YesNo?              @relation("urinalGenderSensivity", fields: [urinalGenderSensivityId], references: [id])
  LiquidWasteSection       LiquidWasteSection? @relation(fields: [liquidWasteSectionId], references: [id])

  ToiletPitPosition ToiletPitPosition? @relation(fields: [toiletPitPositionId], references: [id])

  PremisesToiletType            PremisesToiletType?            @relation(fields: [premisesToiletTypeId], references: [id])
  PremisesEffluentManagement    PremisesEffluentManagement?    @relation(fields: [premisesEffluentManagementId], references: [id])
  PremisesExcretaContainment    PremisesExcretaContainment?    @relation(fields: [premisesExcretaContainmentId], references: [id])
  PremisesExcretaDisposalMethod PremisesExcretaDisposalMethod? @relation(fields: [premisesExcretaDisposalMethodId], references: [id])
}

model PremisesToiletType {
  id                         Int                        @id @default(autoincrement())
  PremisesWashroomFacility   PremisesWashroomFacility[]
  ToiletType                 ToiletType                 @relation(fields: [toiletTypeId], references: [id])
  deleted                    Int?                       @default(0)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  premisesWashroomFacilityId Int
  toiletTypeId               Int
}

model PremisesEffluentManagement {
  id                         Int                        @id @default(autoincrement())
  PremisesWashroomFacility   PremisesWashroomFacility[]
  EffluentManagement         EffluentManagement         @relation(fields: [effluentManagementId], references: [id])
  effluentManagementId       Int
  deleted                    Int?                       @default(0)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  premisesWashroomFacilityId Int
}

model PremisesExcretaDisposalMethod {
  id                         Int                        @id @default(autoincrement())
  PremisesWashroomFacility   PremisesWashroomFacility[]
  premisesWashroomFacilityId Int

  ExcretaDisposalMethod   ExcretaDisposalMethod @relation(fields: [excretaDisposalMethodId], references: [id])
  deleted                 Int?                  @default(0)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  excretaDisposalMethodId Int
}

model PremisesExcretaContainment {
  id                         Int                        @id @default(autoincrement())
  PremisesWashroomFacility   PremisesWashroomFacility[]
  premisesWashroomFacilityId Int

  ExcretaContainment   ExcretaContainment @relation(fields: [excretaContainmentId], references: [id])
  deleted              Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  excretaContainmentId Int
}

model PremisesGreyWaterDisposal {
  id                   Int                @id @default(autoincrement())
  liquidWasteSectionId Int
  LiquidWasteSection   LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  GreyWaterDisposal    GreyWaterDisposal  @relation(fields: [greyWaterDisposalId], references: [id])
  deleted              Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  greyWaterDisposalId  Int
}

model SolidWasteSection {
  id                               Int     @id @default(autoincrement())
  inspectionId                     Int
  wasteCollectorRegistrationId     Int
  wasteCollectorName               String? @db.VarChar(255)
  wasteSortingId                   Int
  //sanitationGeneralRating          Int
  receiptsUpToDateId               Int?
  approvedWasteStorageReceptacleId Int?
  adequateWasteStorageReceptacleId Int?
  wasteCollectionFrequencyId       Int?

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adequateWasteStorageReceptacle YesNo?                    @relation("adequateWasteStorageReceptacle", fields: [adequateWasteStorageReceptacleId], references: [id])
  approvedWasteStorageReceptacle YesNo?                    @relation("approvedWasteStorageReceptacle", fields: [approvedWasteStorageReceptacleId], references: [id])
  wasteCollectionFrequency       Frequency?                @relation(fields: [wasteCollectionFrequencyId], references: [id])
  wasteCollectorRegistration     YesNo?                    @relation("wasteCollectorRegistration", fields: [wasteCollectorRegistrationId], references: [id])
  Inspection                     Inspection                @relation(fields: [inspectionId], references: [id])
  wasteSorting                   YesNo                     @relation("wasteSorting", fields: [wasteSortingId], references: [id])
  receiptsUpToDate               YesNo?                    @relation("receiptsUpToDate", fields: [receiptsUpToDateId], references: [id])
  SlaughterHouse                 SlaughterHouse[]
  Cemetery                       Cemetery[]
  TransferWasteStation           TransferWasteStation[]
  CommunalContainer              CommunalContainer[]
  PremisesWasteReceptacle        PremisesWasteReceptacle[]
  PremisesWasteCollection        PremisesWasteCollection[]
}

model PremisesWasteReceptacle {
  id                   Int                  @id @default(autoincrement())
  SolidWasteSection    SolidWasteSection    @relation(fields: [solidWasteSectionId], references: [id])
  SolidWasteReceptacle SolidWasteReceptacle @relation(fields: [solidWasteReceptacleId], references: [id])

  solidWasteReceptacleId Int
  deleted                Int?     @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  solidWasteSectionId    Int
}

model PremisesWasteCollection {
  id                  Int                 @id @default(autoincrement())
  SolidWasteSection   SolidWasteSection   @relation(fields: [solidWasteSectionId], references: [id])
  WasteCollectionType WasteCollectionType @relation(fields: [wasteCollectionTypeId], references: [id])

  wasteCollectionTypeId Int
  deleted               Int?     @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  solidWasteSectionId   Int
}

////////////END SECTION ///////////

////////////////////HYGIENE SECTION ///////////
model HygieneSection {
  id                        Int  @id @default(autoincrement())
  inspectionId              Int
  publicBathRoomConditionId Int?

  safeConditionUncookedId Int?
  safeConditionCookedId   Int?

  animalSpaceConditionId Int?
  vaccinationProofId     Int?
  deleted                Int?     @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  Inspection Inspection @relation(fields: [inspectionId], references: [id])

  safeConditionUncooked YesNo? @relation("safeConditionUncooked", fields: [safeConditionUncookedId], references: [id])
  safeConditionCooked   YesNo? @relation("safeConditionCooked", fields: [safeConditionCookedId], references: [id])
  animalSpaceCondition  YesNo? @relation("animalSpaceCondition", fields: [animalSpaceConditionId], references: [id])
  vaccinationProof      YesNo? @relation("vaccinationProof", fields: [vaccinationProofId], references: [id])

  PremisesPestSigns PremisesPestSigns[]
  YesNo             YesNo?              @relation(fields: [yesNoId], references: [id])
  yesNoId           Int?
}

model PremisesPestSigns {
  id               Int            @id @default(autoincrement())
  hygieneSectionId Int
  pestSignId       Int
  HygieneSection   HygieneSection @relation(fields: [hygieneSectionId], references: [id])
  PestSign         PestSign       @relation(fields: [pestSignId], references: [id])
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

////////////////////END HYGIENE SECTION ///////////

model ConclusionSection {
  id Int @id @default(autoincrement())

  officerComment           String                     @db.VarChar(255)
  obnoxiousTradeNearby     YesNo                      @relation("obnoxiousTradeNearby", fields: [obnoxiousTradeNearbyId], references: [id])
  obnoxiousTradeNearbyId   Int
  deleted                  Int?                       @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  inspectionId             Int
  PremisesNuisanceDetected PremisesNuisanceDetected[]

  Inspection Inspection @relation(fields: [inspectionId], references: [id])

  PremisesActionTaken PremisesActionTaken[]
}

model PremisesActionTaken {
  id                  Int @id @default(autoincrement())
  actionId            Int
  conclusionSectionId Int

  deleted           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ConclusionSection ConclusionSection @relation(fields: [conclusionSectionId], references: [id])
  Action            Action            @relation(fields: [actionId], references: [id])
}

model PremisesNuisanceDetected {
  id                  Int               @id @default(autoincrement())
  ConclusionSection   ConclusionSection @relation(fields: [conclusionSectionId], references: [id])
  deleted             Int?              @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  conclusionSectionId Int
  Nuisance            Nuisance          @relation(fields: [nuisanceId], references: [id])
  nuisanceId          Int
}

model Picture {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String     @db.VarChar(255)
  Inspection  Inspection @relation(fields: [inspectionId], references: [id])
  deleted     Int?       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  inspectionId Int
}

//////////////////////////////////////////////////TODO////////////////////////////////

// model PremisesHospitalityServicesProvided {
//   id                           Int                        @id @default(autoincrement())
//   Inspection                   Inspection                 @relation(fields: [inspectionId], references: [id])
//   deleted                      Int?                       @default(0)
//   createdAt                    DateTime                   @default(now())
//   updatedAt                    DateTime                   @updatedAt
//   inspectionId                 Int
//   HospitalityPremisesService   HospitalityPremisesService @relation(fields: [hospitalityPremisesServiceId], references: [id])
//   hospitalityPremisesServiceId Int
// }

// lodging
// catering
// drinking
// games

// model HospitalityPremisesService {
//   id                                  Int                                   @id @default(autoincrement())
//   name                                String                                @db.VarChar(255)
//   deleted                             Int?                                  @default(0)
//   createdAt                           DateTime                              @default(now())
//   updatedAt                           DateTime                              @updatedAt
//   PremisesHospitalityServicesProvided PremisesHospitalityServicesProvided[]
//   PremisesSubtypeSection              PremisesSubtypeSection[]
// }

// model HospitalityPremisesType {
//   id        Int      @id @default(autoincrement())
//   name      String   @db.VarChar(255)
//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// table top etc
// model EateryType {
//   id              Int               @id @default(autoincrement())
//   name            String            @db.VarChar(255)
//   deleted         Int?              @default(0)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   FacilitySection FacilitySection[]
// }

// model EateryPremisesType {
//   id              Int               @id @default(autoincrement())
//   name            String            @db.VarChar(255)
//   deleted         Int?              @default(0)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   FacilitySection FacilitySection[]
// }

// model HealthPremisesType {
//   id              Int               @id @default(autoincrement())
//   name            String            @db.VarChar(255)
//   deleted         Int?              @default(0)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
//   FacilitySection FacilitySection[]
// }

// model HealthPremisesService {
//   id                             Int                              @id @default(autoincrement())
//   name                           String                           @db.VarChar(255)
//   deleted                        Int?                             @default(0)
//   createdAt                      DateTime                         @default(now())
//   updatedAt                      DateTime                         @updatedAt
//   PremisesHealthServicesProvided PremisesHealthServicesProvided[]
// }

// model PremisesHealthServicesProvided {
//   id                      Int                   @id @default(autoincrement())
//   deleted                 Int?                  @default(0)
//   createdAt               DateTime              @default(now())
//   updatedAt               DateTime              @updatedAt
//   HealthPremisesService   HealthPremisesService @relation(fields: [healthPremisesServiceId], references: [id])
//   FacilitySection         FacilitySection[]
//   healthPremisesServiceId Int
//   Inspection              Inspection?           @relation(fields: [inspectionId], references: [id])
//   inspectionId            Int?
// }

///

// model PremisesType {
//   id                     Int                      @id @default(autoincrement())
//   name                   String                   @db.VarChar(255)
//   inspectionFormId       Int
//   deleted                Int?                     @default(0)
//   createdAt              DateTime                 @default(now())
//   updatedAt              DateTime                 @updatedAt
//   InspectionForm         InspectionForm           @relation(fields: [inspectionFormId], references: [id])
//   PremisesSubtypeSection PremisesSubtypeSection[]
// }

// model PremisesServices {
//   id                       Int                        @id @default(autoincrement())
//   name                     String                     @db.VarChar(255)
//   inspectionFormId         Int
//   deleted                  Int?                       @default(0)
//   createdAt                DateTime                   @default(now())
//   updatedAt                DateTime                   @updatedAt
//   PremisesServicesProvided PremisesServicesProvided[]
//   InspectionForm           InspectionForm             @relation(fields: [inspectionFormId], references: [id])
// }

// model PremisesServicesProvided {
//   id                Int              @id @default(autoincrement())
//   deleted           Int?             @default(0)
//   createdAt         DateTime         @default(now())
//   updatedAt         DateTime         @updatedAt
//   PremisesServices  PremisesServices @relation(fields: [premisesServiceId], references: [id])
//   premisesServiceId Int

//   Inspection   Inspection? @relation(fields: [inspectionId], references: [id])
//   inspectionId Int?

//   PremisesSubtypeSection   PremisesSubtypeSection @relation(fields: [premisesSubtypeSectionId], references: [id])
//   premisesSubtypeSectionId Int
// }

// model PremisesSubtypeSection {
//   id             Int  @id @default(autoincrement())
//   premisesTypeId Int
//   ablutionSlabId Int?
//   inspectionId   Int

//   Inspection   Inspection   @relation(fields: [inspectionId], references: [id])
//   PremisesType PremisesType @relation(fields: [premisesTypeId], references: [id])

//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   PremisesServicesProvided PremisesServicesProvided[]
// }

//  var selectedAblutionSlab,
//       selectedPremiseType,
//       selectedEateryType,
//       selectedInstitutionType,
//       selectedSanitaryFacilityType;

model IndustryPremisesSpecific {
  id                       Int      @id @default(autoincrement())
  consumableTypeId         Int?
  storageFinishedProductId Int
  nonConsumableTypeId      Int
  productsManufactured     String   @db.VarChar(255)
  mainRawMaterial          String   @db.VarChar(255)
  sourceRawMaterial        String   @db.VarChar(255)
  majorByproduct           String   @db.VarChar(255)
  deleted                  Int?     @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  storageFinishedProduct YesNo @relation(fields: [storageFinishedProductId], references: [id])
}

model Type {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
  Subtype          Subtype[]
  Service          Service[]
}

model Subtype {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
  Type             Type           @relation(fields: [typeId], references: [id])
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
  typeId           Int
  // RespondentDesignation RespondentDesignation[]
}

model Service {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
  Type             Type?          @relation(fields: [typeId], references: [id])
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
  typeId           Int?
}

//////////////////////////ADD THESE TO DIFFERENT SECTION ////////////////////////

model SlaughterHouse {
  id                                      Int      @id @default(autoincrement())
  name                                    String   @db.VarChar(255)
  deleted                                 Int?     @default(0)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
  slaughterRoomsAvailableId               Int
  condemnationRoomAvailableId             Int
  hangingExaminationFacilitiesAvailableId Int
  holdingPenAvailableId                   Int
  isolationPenAvailableId                 Int
  chuteAvailableId                        Int
  genderFriendlyAvailableId               Int
  comfortRoomAvailableId                  Int
  wheelBathAvailableId                    Int
  footbathAvailableId                     Int
  meatInspectorOfficeAvailableId          Int
  dressingFloorAvailableId                Int

  slaughterRoomsAvailable               YesNo @relation("slaughterRoomsAvailable", fields: [slaughterRoomsAvailableId], references: [id])
  condemnationRoomAvailable             YesNo @relation("condemnationRoomAvailable", fields: [condemnationRoomAvailableId], references: [id])
  hangingExaminationFacilitiesAvailable YesNo @relation("hangingExaminationFacilitiesAvailable", fields: [hangingExaminationFacilitiesAvailableId], references: [id])
  holdingPenAvailable                   YesNo @relation("holdingPenAvailable", fields: [holdingPenAvailableId], references: [id])
  isolationPenAvailable                 YesNo @relation("isolationPenAvailable", fields: [isolationPenAvailableId], references: [id])
  chuteAvailable                        YesNo @relation("chuteAvailable", fields: [chuteAvailableId], references: [id])
  genderFriendlyAvailable               YesNo @relation("genderFriendlyAvailable", fields: [genderFriendlyAvailableId], references: [id])
  comfortRoomAvailable                  YesNo @relation("comfortRoomAvailable", fields: [comfortRoomAvailableId], references: [id])
  wheelBathAvailable                    YesNo @relation("wheelBathAvailable", fields: [wheelBathAvailableId], references: [id])
  footbathAvailable                     YesNo @relation("footbathAvailable", fields: [footbathAvailableId], references: [id])
  meatInspectorOfficeAvailable          YesNo @relation("meatInspectorOfficeAvailable", fields: [meatInspectorOfficeAvailableId], references: [id])
  dressingFloorAvailable                YesNo @relation("dressingFloorAvailable", fields: [dressingFloorAvailableId], references: [id])

  SolidWasteSection   SolidWasteSection? @relation(fields: [solidWasteSectionId], references: [id])
  solidWasteSectionId Int?
}

model Cemetery {
  id Int @id @default(autoincrement())

  deleted                    Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  layoutCemeteryAdequacyId   Int
  cemeteryFencedId           Int
  cremationPracticedId       Int
  cremationPlatformId        Int
  ashesDisposalId            Int
  sextonAvailabilityId       Int
  sextonOfficeAvailabilityId Int

  sextonAvailability       YesNo @relation("sextonAvailability", fields: [sextonAvailabilityId], references: [id])
  sextonOfficeAvailability YesNo @relation("sextonOfficeAvailability", fields: [sextonOfficeAvailabilityId], references: [id])
  layoutCemeteryAdequacy   YesNo @relation("layoutCemeteryAdequacy", fields: [layoutCemeteryAdequacyId], references: [id])
  cemeteryFenced           YesNo @relation("cemeteryFenced", fields: [cemeteryFencedId], references: [id])
  cremationPracticed       YesNo @relation("cremationPracticed", fields: [cremationPracticedId], references: [id])
  cremationPlatform        YesNo @relation("cremationPlatform", fields: [cremationPlatformId], references: [id])
  ashesDisposal            YesNo @relation("ashesDisposal", fields: [ashesDisposalId], references: [id])

  SolidWasteSection   SolidWasteSection? @relation(fields: [solidWasteSectionId], references: [id])
  solidWasteSectionId Int?
}

model TransferWasteStation {
  id                      Int @id @default(autoincrement())
  transferStationCapacity Int

  deleted               Int?     @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  solidWasteSectionId   Int
  wasteSortingId        Int
  leachateManagementId  Int
  hazardousManagementId Int

  //wasteSorting        YesNo             @relation("wasteSorting", fields: [wasteSortingId], references: [id])
  leachateManagement  YesNo             @relation("leachateManagement", fields: [leachateManagementId], references: [id])
  hazardousManagement YesNo             @relation("hazardousManagement", fields: [hazardousManagementId], references: [id])
  SolidWasteSection   SolidWasteSection @relation(fields: [solidWasteSectionId], references: [id])
}

model CommunalContainer {
  id                   Int    @id @default(autoincrement())
  attendantName        String @db.VarChar(255)
  attendantPhoneNumber String @db.VarChar(255)
  serviceProviderName  String @db.VarChar(255)
  containerVolume      Int
  numberContainers     Int

  solidWasteSectionId   Int
  scheduledCollectionId Int
  containerConditionId  Int
  deleted               Int?              @default(0)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  SolidWasteSection     SolidWasteSection @relation(fields: [solidWasteSectionId], references: [id])
  scheduledCollection   YesNo             @relation("scheduledCollection", fields: [scheduledCollectionId], references: [id])
  containerCondition    YesNo             @relation("containerCondition", fields: [containerConditionId], references: [id])
}
