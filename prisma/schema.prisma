// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  userTypeId  Int?     @default(2)
  surname     String   @db.VarChar(255)
  otherNames  String   @db.VarChar(255)
  email       String?  @db.VarChar(255)
  phoneNumber String   @db.VarChar(255)
  password    String   @db.VarChar(255)
  idTypeId    Int
  idNumber    String   @db.VarChar(255)
  activated   Int?     @default(0)
  deleted     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Usertype UserType? @relation(fields: [userTypeId], references: [id])

  Logs            Logs[]
  LocationSection LocationSection[]
  Inspection      Inspection[]
  BaselineSection BaselineSection[]
}

model InspectionForm {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]
}

model Inspection {
  id             Int            @id @default(autoincrement())
  inspectionCode String         @db.VarChar(255)
  InspectionForm InspectionForm @relation(fields: [inspectionFormId], references: [id])
  InspectionType InspectionType @relation(fields: [inspectionTypeId], references: [id])
  User           User           @relation(fields: [userId], references: [id])
  deleted        Int?           @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  inspectionFormId  Int
  inspectionTypeId  Int
  userId            Int
  ResidentialForm   ResidentialForm[]
  LocationSection   LocationSection[]
  BaselineSection   BaselineSection[]
  FacilitySection   FacilitySection[]
  PopulationSection PopulationSection[]
}

/////////////////////////START INSPECTION FORMS//////////////////////////////////////////////

model ResidentialForm {
  id Int @id @default(autoincrement())

  animalsAvailability YesNo      @relation(fields: [yesNoId], references: [id])
  Inspection          Inspection @relation(fields: [inspectionId], references: [id])
  deleted             Int?       @default(0)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  yesNoId             Int
  inspectionId        Int
}

// model HealthForm {
//   id                   Int                @id @default(autoincrement())
//   separateWard         YesNo              @relation("separateWard", fields: [separateWardId], references: [id])
//   HealthFacilityType   HealthFacilityType @relation(fields: [healthFacilityTypeId], references: [id])
//   Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
//   deleted              Int?               @default(0)
//   createdAt            DateTime           @default(now())
//   updatedAt            DateTime           @updatedAt
//   inspectionId         Int
//   healthFacilityTypeId Int
//   separateWardId       Int

// }

// model EatingDrinkingForm {
//   id                                Int                   @id @default(autoincrement())
//   inspectionId                      Int                   @unique
//   eateryTypeId                      Int
//   storageConditionId                Int
//   baselineInformationId             Int
//   pantryAvailability                Int
//   handwashingFacilityAvailabilityId Int
//   premisePopulationId               Int?
//   solidWasteReceptacleId            Int?
//   safeUnsafeId                      Int?
//   deleted                           Int?                  @default(0)
//   createdAt                         DateTime              @default(now())
//   updatedAt                         DateTime              @updatedAt
//   Inspection                        Inspection            @relation(fields: [inspectionId], references: [id])
//   StorageCondition                  StorageCondition      @relation(fields: [storageConditionId], references: [id])
//   BaselineInformation               BaselineInformation   @relation(fields: [baselineInformationId], references: [id])
//   EateryType                        EateryType            @relation(fields: [eateryTypeId], references: [id])
//   PremisePopulation                 PremisePopulation?    @relation(fields: [premisePopulationId], references: [id])
//   SolidWasteReceptacle              SolidWasteReceptacle? @relation(fields: [solidWasteReceptacleId], references: [id])
//   SafeUnsafe                        SafeUnsafe?           @relation(fields: [safeUnsafeId], references: [id])
// }

// model SanitaryForm {
//   id Int @id @default(autoincrement())

//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model HospitalityForm {
//   id Int @id @default(autoincrement())

//   deleted                     Int?                          @default(0)
//   createdAt                   DateTime                      @default(now())
//   updatedAt                   DateTime                      @updatedAt
//   HospitalityServicesProvided HospitalityServicesProvided[]
// }

// model IndustryPremise {
//   id Int @id @default(autoincrement())

//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model InstitutionalPremise {
//   id Int @id @default(autoincrement())

//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model MarketLorryParkPremise {
//   id Int @id @default(autoincrement())

//   deleted   Int?     @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

/////////////////////////END INSPECTION FORMS//////////////////////////////////////////////

///////////////////////////FORM SECTIONS//////////////////////////////
model LocationSection {
  id            Int      @id @default(autoincrement())
  inspectionId  Int
  name          String   @db.VarChar(255)
  deleted       Int?     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  districtId    Int
  subDistrictId Int
  zoneId        Int
  userId        Int
  communityId   Int
  community     String   @db.VarChar(255)
  ghanaPostGps  String   @db.VarChar(255)
  latitude      String   @db.VarChar(255)
  longitude     String   @db.VarChar(255)

  Community         Community        @relation(fields: [communityId], references: [id])
  District          District         @relation(fields: [districtId], references: [id])
  SubDistrict       SubDistrict      @relation(fields: [subDistrictId], references: [id])
  Zone              Zone             @relation(fields: [zoneId], references: [id])
  User              User             @relation(fields: [userId], references: [id])
  Inspection        Inspection       @relation(fields: [inspectionId], references: [id])
  BaselineSection   BaselineSection? @relation(fields: [baselineSectionId], references: [id])
  baselineSectionId Int?
}

model BaselineSection {
  id                      Int      @id @default(autoincrement())
  respondentName          String   @db.VarChar(255)
  phoneNumber             String   @db.VarChar(255)
  inspectionTypeId        Int
  premiseTypeId           Int
  deleted                 Int?     @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  Int
  respondentDesignationId Int
  inspectionId            Int


  User                  User                  @relation(fields: [userId], references: [id])
  LocationSection       LocationSection[]
  RespondentDesignation RespondentDesignation @relation(fields: [respondentDesignationId], references: [id])
  Inspection            Inspection            @relation(fields: [inspectionId], references: [id])

}

model FacilitySection {
  id                                        Int   @id @default(autoincrement())
  inspectionId                              Int
  separateWard                              YesNo @relation(fields: [separateWardId], references: [id])
  premiseTypeId                             Int
  respondentDesignationId                   Int
  approvedHandwashingFacilityAvailabilityId Int
  protectiveClothingId                      Int
  firstAidAvailabilityId                    Int
  drainsAvailabilityId                      Int
  toiletAvailabilityId                      Int
  urinalAvailabilityId                      Int
  bathRoomAvailabilityId                    Int
  separateWardId                            Int

  protectiveClothing   YesNo @relation("protectiveClothing", fields: [protectiveClothingId], references: [id])
  firstAidAvailability YesNo @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  drainsAvailability   YesNo @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability   YesNo @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability   YesNo @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  bathRoomAvailability YesNo @relation("bathRoomAvailability", fields: [bathRoomAvailabilityId], references: [id])

  RespondentDesignation RespondentDesignation @relation(fields: [respondentDesignationId], references: [id])
  Inspection            Inspection            @relation(fields: [inspectionId], references: [id])


  EateryType EateryType[]
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model AnimalRearingSection {
  id Int @id @default(autoincrement())

  animalType    String @db.VarChar(255)
  animalsNumber Int?   @default(0)

  deleted            Int?     @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  conditionId        Int
  vaccinationProofId Int
  animalsPermitId    Int

  spaceCondition   Condition @relation(fields: [conditionId], references: [id])
  animalsPermit    YesNo     @relation("animalsPermit", fields: [animalsPermitId], references: [id])
  vaccinationProof YesNo     @relation("vaccinationProof", fields: [vaccinationProofId], references: [id])

}

model PopulationSection {
  id                         Int   @id @default(autoincrement())
  maleDoctorsNumber          Int?
  femaleDoctorsNumber        Int?
  maleNursesNumber           Int?
  femaleNursesNumber         Int?
  maleAuxiliaryStaffNumber   Int?
  femaleAuxiliaryStaffNumber Int?
  roomCapacity               Int?
  facilityCapacity           Int?
  separateWardMaleFemale     YesNo @relation(fields: [yesNoId], references: [id])

  maleWorkers                               Int?
  femaleWorkers                             Int?
  medicallyCertifiedWorkers                 Int?
  numberMaleTeachers                        Int?
  numberFemaleTeachers                      Int?
  numberMaleNonTeachingStaff                Int?
  numberFemaleNonTeachingStaff              Int?
  numberMaleStudents                        Int?
  numberFemaleStudents                      Int?
  numberFemaleSchoolCooks                   Int?
  numberCooksMedicallyCertified             Int?
  numberFoodVendorsCompound                 Int?
  numberFoodVendorsMedicallyCertified       Int?
  numberPreschoolTeachersMedicallyCertified Int?
  numberStores                              Int?
  numberStalls                              Int?
  numberSheds                               Int?
  numberVehicles                            Int?
  numberHousehold                           Int?
  numberMales                               Int?
  numberFemales                             Int?
  numberRooms                               Int?
  numberBeds                                Int?
  staffRoomAvailability                     Int?
  deleted                                   Int?       @default(0)
  createdAt                                 DateTime   @default(now())
  updatedAt                                 DateTime   @updatedAt
  Inspection                                Inspection @relation(fields: [inspectionId], references: [id])
  yesNoId                                   Int
  inspectionId                              Int
}

model LicenceSection {
  id                                  Int @id @default(autoincrement())
  businessLicenceAvailabilityId       Int
  medicalCertAvailabilityId           Int
  operatingLicenceAvailabilityId      Int
  propertyRateAvailabilityId          Int
  structurePermitAvailabilityId       Int
  habitationCertificateAvailabilityId Int
  fumigationCertificateAvailabilityId Int
  medicalCertificateAvailabilityId    Int


  buildingPermitId Int

  name                              String   @db.VarChar(255)
  deleted                           Int?     @default(0)
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  businessLicenceAvailability       YesNo    @relation("businessLicenceAvailability", fields: [businessLicenceAvailabilityId], references: [id])
  medicalCertificateAvailability    YesNo    @relation("medicalCertificateAvailability", fields: [medicalCertAvailabilityId], references: [id])
  operatingLicenceAvailability      YesNo    @relation("operatingLicenceAvailability", fields: [operatingLicenceAvailabilityId], references: [id])
  propertyRateAvailability          YesNo    @relation("propertyRateAvailability", fields: [propertyRateAvailabilityId], references: [id])
  structurePermitAvailability       YesNo    @relation("structurePermitAvailability", fields: [structurePermitAvailabilityId], references: [id])
  habitationCertificateAvailability YesNo    @relation("habitationCertificateAvailability", fields: [habitationCertificateAvailabilityId], references: [id])
  fumigationCertificateAvailability YesNo    @relation("fumigationCertificateAvailability", fields: [fumigationCertificateAvailabilityId], references: [id])
  buildingPermit                    YesNo    @relation("buildingPermit", fields: [buildingPermitId], references: [id])


}

model WaterSection {
  id Int @id @default(autoincrement())

  distanceWaterStorageSanitary Int
  waterGeneralRating           Int
  waterSourceId                Int
  waterConditionId             Int
  waterSupplyTypeId            Int
  waterStorageTypeId           Int
  waterTreatmentTypeId         Int
  waterFlowFrequencyId         Int
  waterStorageConditionId      Int
  deleted                      Int?     @default(0)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt


  Frequency             Frequency          @relation(fields: [waterFlowFrequencyId], references: [id])
  WaterSource           WaterSource        @relation(fields: [waterSourceId], references: [id])
  WaterCondition        Condition          @relation(fields: [waterConditionId], references: [id])
  WaterSupplyType       WaterSupplyType    @relation(fields: [waterSupplyTypeId], references: [id])
  WaterStorageType      WaterStorageType   @relation(fields: [waterStorageTypeId], references: [id])
  waterStorageCondition SafeUnsafe         @relation(fields: [waterStorageConditionId], references: [id])
  WaterTreatmentType    WaterTreatmentType @relation(fields: [waterTreatmentTypeId], references: [id])
}

model SanitationSection {
  id Int @id @default(autoincrement())

  wasteCollectorRegistration    YesNo                @relation("wasteCollectorRegistration", fields: [wasteCollectorRegistrationId], references: [id])
  wasteCollectorName            String               @db.VarChar(255)
  solidWasteReceptacleId        Int
  wasteWaterDisposal            Int
  greyWaterDisposal             Int
  wasteStorageReceptacle        Int
  collectionFrequency           Int
  wasteSorting                  Int
  binsPicture                   String               @db.VarChar(255)
  sanitationGeneralRating       Int
  drainsCondition               Int
  receiptsUpToDate              Int
  wasteCollectorRegistrationId  Int
  pondingEvidence               YesNo                @relation("pondingEvidence", fields: [pondingEvidenceId], references: [id])
  drainTypeId                   Int
  labourersOfficeAvailabilityId Int
  storeRoomAvailabilityId       Int
  DrainType                     DrainType            @relation(fields: [drainTypeId], references: [id])
  sanitaryFacilityType          SanitaryFacilityType @relation(fields: [sanitaryFacilityTypeId], references: [id])
  labourersOfficeAvailability   YesNo                @relation(fields: [labourersOfficeAvailabilityId], references: [id])
  storeRoomAvailability         YesNo                @relation(fields: [storeRoomAvailabilityId], references: [id])
  toiletAvailability            Int
  urinalAvailability            Int
  bathroomAvailability          Int
  numberToiletPots              Int
  numberUrinePots               Int
  toiletTypeId                  Int
  toiletAdequacyId              Int
  urinalAdequacyId              Int
  availToiletFaciltyMgtId       Int
  toiletGenderSensivityId       Int
  urinalGenderSensivityId       Int

  approvedHandwashingFacilityAvailabilityId Int
  excretaDisposalMethodId                   Int
  excretaContainmentId                      Int
  effluentManagementId                      Int
  effluentManagementReport                  YesNo @relation("effluentManagementReport", fields: [effluentManagementReportId], references: [id])
  analCleansingMaterialMgtId                Int
  toiletDisabilityFriendlyId                Int
  urinalDisabilityFriendlyId                Int
  effluentManagementReportId                Int

  facilityCleanlinessId Int

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  toiletType     ToiletType @relation(fields: [toiletTypeId], references: [id])
  toiletAdequacy YesNo      @relation("toiletAdequacy", fields: [toiletAdequacyId], references: [id])
  urinalAdequacy YesNo      @relation("urinalAdequacy", fields: [urinalAdequacyId], references: [id])

  availToiletFaciltyMgt YesNo @relation("availToiletFaciltyMgt", fields: [availToiletFaciltyMgtId], references: [id])
  toiletGenderSensivity YesNo @relation("toiletGenderSensivity", fields: [toiletGenderSensivityId], references: [id])
  urinalGenderSensivity YesNo @relation("urinalGenderSensivity", fields: [urinalGenderSensivityId], references: [id])

  toiletDisabilityFriendly YesNo @relation("toiletDisabilityFriendly", fields: [toiletDisabilityFriendlyId], references: [id])
  urinalDisabilityFriendly YesNo @relation("urinalDisabilityFriendly", fields: [urinalDisabilityFriendlyId], references: [id])

  excretaDisposalMethod                   ExcretaDisposalMethod    @relation(fields: [excretaDisposalMethodId], references: [id])
  excretaContainment                      ExcretaContainment       @relation(fields: [excretaContainmentId], references: [id])
  effluentManagement                      EffluentManagement       @relation(fields: [effluentManagementId], references: [id])
  analCleansingMgt                        AnalCleansingMaterialMgt @relation(fields: [analCleansingMaterialMgtId], references: [id])
  approvedHandwashingFacilityAvailability YesNo                    @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  facilityCleanliness                     YesNo                    @relation("facilityCleanliness", fields: [facilityCleanlinessId], references: [id])

  sanitaryFacilityTypeId Int
  pondingEvidenceId      Int
  SolidWasteReceptacle   SolidWasteReceptacle   @relation(fields: [solidWasteReceptacleId], references: [id])
  SlaughterHouse         SlaughterHouse[]
  Cemetery               Cemetery[]
  TransferWasteStation   TransferWasteStation[]
  CommunalContainer      CommunalContainer[]
}

model HygieneSection {

  id                      Int      @id @default(autoincrement())
  pestSigns               YesNo    @relation("pestSigns", fields: [pestSignsId], references: [id])
  evidenceStagnation      YesNo    @relation("evidenceStagnation", fields: [evidenceStagnationId], references: [id])
  disinfection            YesNo    @relation(fields: [disinfectionId], references: [id])
  disinfestation          YesNo    @relation(fields: [disinfestationId], references: [id])
  safeConditionUncooked   YesNo    @relation(fields: [safeConditionUncookedId], references: [id])
  safeConditionCooked     YesNo    @relation(fields: [safeConditionCookedId], references: [id])
  publicBathRoomCondition GoodBad  @relation(fields: [goodBadId], references: [id])
  pestSignsId             Int
  evidenceStagnationId    Int
  deleted                 Int?     @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  disinfectionId          Int
  disinfestationId        Int
  safeConditionUncookedId Int
  safeConditionCookedId   Int

  goodBadId Int
}

model ConclusionSection {
  id Int @id @default(autoincrement())

  // nuisance
  // obnoxious_trade_nearby
  // actions_taken
  // officer_comment

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// educational
// religious
// corporate

model InstitutionType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// church
// mosque
// shrine
// others

model ReligiousInstitutionType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  deleted              Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ReligiousInstitution ReligiousInstitution[]
}

model ReligiousInstitution {
  id                       Int                      @id @default(autoincrement())
  ReligiousInstitutionType ReligiousInstitutionType @relation(fields: [religiousInstitutionTypeId], references: [id])
  soundProof               YesNo                    @relation(fields: [soundProofId], references: [id])
  disabilityFriendly       YesNo                    @relation(fields: [disabilityFriendlyId], references: [id])
  multipleExit             YesNo                    @relation(fields: [multipleExitId], references: [id])
  ablutionSlab             YesNo                    @relation(fields: [ablutionSlabId], references: [id])

  deleted                    Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  religiousInstitutionTypeId Int
  yesNoId                    Int
}

model CorporateInstitution {
  id                       Int                      @id @default(autoincrement())
  CorporateInstitutionType CorporateInstitutionType @relation(fields: [corporateInstitutionTypeId], references: [id])
  soundProof               YesNo                    @relation(fields: [soundProof], references: [id])
  disabilityFriendly       YesNo                    @relation(fields: [yesNoId], references: [id])
  multipleExit             YesNo                    @relation(fields: [yesNoId], references: [id])
  ablution_slab            YesNo                    @relation(fields: [yesNoId], references: [id])

  deleted                    Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  corporateInstitutionTypeId Int
  yesNoId                    Int

}

// bank
// savings_and_loans
// micro_finance
// credit_union
// others

model CorporateInstitutionType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  deleted              Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  CorporateInstitution CorporateInstitution[]
}

// outpatient
// inpatient
// surgical
// maternity
// undertaking
// mortuary

model HealthServices {
  id        Int      @id @default(autoincrement())
  name      String
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthServicesProvided {
  id        Int      @id @default(autoincrement())
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IndustryConsumable {
  id Int @id @default(autoincrement())

  consumableType         ConsumableType @relation(fields: [consumableTypeId], references: [id])
  productsManufactured   String         @db.VarChar(255)
  mainRawMaterial        String         @db.VarChar(255)
  sourceRawMaterial      String         @db.VarChar(255)
  majorByproduct         String         @db.VarChar(255)
  storageFinishedProduct SafeUnsafe     @relation(fields: [safeUnsafeId], references: [id])
  deleted                Int?           @default(0)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  consumableTypeId       Int
  safeUnsafeId           Int
}

model ConsumableType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  IndustryConsumable IndustryConsumable[]
}

model NonConsumableType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PremisePicture {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  section String @db.VarChar(255)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////START DEFAULT SEEDED DATA ///////////////////////////

model UserType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model District {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  LocationSection LocationSection[]
}

model Community {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  LocationSection LocationSection[]
}

model SubDistrict {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  LocationSection LocationSection[]
}

model Zone {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  LocationSection LocationSection[]
}

// intermittent
// regular
// others
// daily
// weekly
// forthnightly
// monthly
// intermittent

model Frequency {
  id        Int      @id @default(autoincrement())
  name      String
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WaterSection WaterSection[]
}

model ToiletType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model AnalCleansingMaterialMgt {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model EffluentManagement {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model ExcretaContainment {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model ExcretaDisposalMethod {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model WaterSource {
  id           Int            @id @default(autoincrement())
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model Condition {
  id                   Int                    @id @default(autoincrement())
  deleted              Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  WaterSection         WaterSection[]
  AnimalRearingSection AnimalRearingSection[]
}

model WaterSupplyType {
  id           Int            @id @default(autoincrement())
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model WaterStorageType {
  id           Int            @id @default(autoincrement())
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model WaterTreatmentType {
  id           Int            @id @default(autoincrement())
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

// covered_bins
// open_bins
// sacks
// polythene_bags
// others

model SolidWasteReceptacle {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SanitationSection SanitationSection[]
}

model YesNo {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  availToiletFaciltyMgt                   SanitationSection[] @relation("availToiletFaciltyMgt")
  toiletGenderSensivity                   SanitationSection[] @relation("toiletGenderSensivity")
  PremiseSanitaryFacility                 SanitationSection[] @relation("urinalGenderSensivity")
  urinalGenderSensivity                   SanitationSection[] @relation("toiletDisabilityFriendly")
  urinalDisabilityFriendly                SanitationSection[] @relation("urinalDisabilityFriendly")
  approvedHandwashingFacilityAvailability SanitationSection[] @relation("approvedHandwashingFacilityAvailability")
  facilityCleanliness                     SanitationSection[] @relation("facilityCleanliness")
  toiletAdequacy                          SanitationSection[] @relation("toiletAdequacy")
  urinalAdequacy                          SanitationSection[] @relation("urinalAdequacy")
  // toiletAvailability                      BaselineInformation[]     @relation("toiletAvailability")
  // urinalAvailability                      BaselineInformation[]     @relation("urinalAvailability")
  // bathRoomAvailability                    BaselineInformation[]     @relation("bathRoomAvailability")
  // protectiveClothing                      BaselineInformation[]     @relation("protectiveClothing")
  // firstAidAvailability                    BaselineInformation[]     @relation("firstAidAvailability")
  // drainsAvailability                      BaselineInformation[]     @relation("drainsAvailability")
  businessLicenceAvailability             LicenceSection[]    @relation("businessLicenceAvailability")
  medicalCertificateAvailability          LicenceSection[]    @relation("medicalCertificateAvailability")
  operatingLicenceAvailability            LicenceSection[]    @relation("operatingLicenceAvailability")
  propertyRateAvailability                LicenceSection[]    @relation("propertyRateAvailability")
  structurePermitAvailability             LicenceSection[]    @relation("structurePermitAvailability")
  habitationCertificateAvailability       LicenceSection[]    @relation("habitationCertificateAvailability")
  fumigationCertificateAvailability       LicenceSection[]    @relation("fumigationCertificateAvailability")
  buildingPermit                          LicenceSection[]    @relation("buildingPermit")

  animalsPermit            AnimalRearingSection[] @relation("animalsPermit")
  vaccinationProof         AnimalRearingSection[] @relation("vaccinationProof")
  SanitationSection        SanitationSection[]
  effluentManagementReport SanitationSection[]    @relation("effluentManagementReport")
  separateWard             FacilitySection[]      @relation("separateWard")

  ResidentialForm          ResidentialForm[]
  FacilitySection          FacilitySection[]
  sextonAvailability       Cemetery[]        @relation("sextonAvailability")
  sextonOfficeAvailability Cemetery[]        @relation("sextonOfficeAvailability")
  layoutCemeteryAdequacy   Cemetery[]        @relation("layoutCemeteryAdequacy")
  cemeteryFenced           Cemetery[]        @relation("cemeteryFenced")
  cremationPracticed       Cemetery[]        @relation("cremationPracticed")
  cremationPlatform        Cemetery[]        @relation("cremationPlatform")
  ashesDisposal            Cemetery[]        @relation("ashesDisposal")

  protectiveClothing   FacilitySection[]   @relation("protectiveClothing")
  firstAidAvailability FacilitySection[]   @relation("firstAidAvailability")
  drainsAvailability   FacilitySection[]   @relation("drainsAvailability")
  toiletAvailability   FacilitySection[]   @relation("toiletAvailability")
  urinalAvailability   FacilitySection[]   @relation("urinalAvailability")
  bathRoomAvailability FacilitySection[]   @relation("bathRoomAvailability")
  PopulationSection    PopulationSection[]



  pestSigns             HygieneSection[] @relation("pestSigns")
  evidenceStagnation    HygieneSection[] @relation("evidenceStagnation")
  disinfection          HygieneSection[] @relation("disinfection")
  disinfestation        HygieneSection[] @relation("disinfestationId")
  safeConditionUncooked HygieneSection[] @relation("safeConditionUncookedId")
  safeConditionCooked   HygieneSection[] @relation("safeConditionCookedId")

  soundProof         ReligiousInstitution[] @relation("soundProof")
  disabilityFriendly ReligiousInstitution[] @relation("disabilityFriendly")
  multipleExit       ReligiousInstitution[] @relation("multipleExit")
  ablutionSlab      ReligiousInstitution[] @relation("ablutionSlab")


 soundProof               YesNo                    @relation(fields: [yesNoId], references: [id])
  disabilityFriendly       YesNo                    @relation(fields: [yesNoId], references: [id])
  multipleExit             YesNo                    @relation(fields: [yesNoId], references: [id])
  ablution_slab            YesNo                    @relation(fields: [yesNoId], references: [id])


  CorporateInstitution CorporateInstitution[]
  CorporateInstitution CorporateInstitution[]
  CorporateInstitution CorporateInstitution[]
  CorporateInstitution CorporateInstitution[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  SlaughterHouse       SlaughterHouse[]
  TransferWasteStation TransferWasteStation[]
  TransferWasteStation TransferWasteStation[]
  TransferWasteStation TransferWasteStation[]
  CommunalContainer    CommunalContainer[]
}

//good bad, ....

model StorageCondition {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SafeUnsafe {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  WaterSection       WaterSection[]
  IndustryConsumable IndustryConsumable[]
}

model RespondentDesignation {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  deleted         Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  BaselineSection BaselineSection[]
  FacilitySection FacilitySection[]
}

model DrainType {
  id                Int                 @id @default(autoincrement())
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

//Baseline inspection, reinspection

model InspectionType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]
}

// table top etc
model EateryType {
  id                Int             @id @default(autoincrement())
  FacilitySection   FacilitySection @relation(fields: [facilitySectionId], references: [id])
  name              String          @db.VarChar(255)
  deleted           Int?            @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  facilitySectionId Int
}

/////////////////////START DEFAULT SEEDED DATA ///////////////////////////

model HospitalityServicesProvided {
  id                   Int      @id @default(autoincrement())
  deleted              Int?     @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  hospitalityPremiseId Int
}

// lodging
// catering
// drinking
// games

model HospitalityService {
  id Int @id @default(autoincrement())

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logs {
  id        Int      @id @default(autoincrement())
  userId    Int
  activity  String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model HealthFacilityType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// hotel
// restaurant
// recreational_facility
// hostel
// motel
// guest_house
// others

model HospitalityFacilityType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SlaughterHouse {
  id                                    Int               @id @default(autoincrement())
  SanitationSection                     SanitationSection @relation(fields: [sanitationSectionId], references: [id])
  name                                  String            @db.VarChar(255)
  slaughterRoomsAvailable               YesNo             @relation(fields: [slaughterRoomsAvailableId], references: [id])
  condemnationRoomAvailable             YesNo             @relation(fields: [condemnationRoomAvailableId], references: [id])
  hangingExaminationFacilitiesAvailable YesNo             @relation(fields: [hangingExaminationFacilitiesAvailableId], references: [id])
  holdingPenAvailable                   YesNo             @relation(fields: [holdingPenAvailableId], references: [id])
  isolationPenAvailable                 YesNo             @relation(fields: [isolationPenAvailableId], references: [id])
  chuteAvailable                        YesNo             @relation(fields: [chuteAvailableId], references: [id])
  genderFriendlyAvailable               YesNo             @relation(fields: [genderFriendlyAvailableId], references: [id])
  comfortRoomAvailable                  YesNo             @relation(fields: [comfortRoomAvailableId], references: [id])
  wheelBathAvailable                    YesNo             @relation(fields: [wheelBathAvailableId], references: [id])
  footbathAvailable                     YesNo             @relation(fields: [footbathAvailableId], references: [id])
  meatInspectorOfficeAvailable          YesNo             @relation(fields: [meatInspectorOfficeAvailableId], references: [id])
  dressingFloorAvailable                YesNo             @relation(fields: [dressingFloorAvailableId], references: [id])

  deleted                                 Int?     @default(0)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
  sanitationSectionId                     Int
  slaughterRoomsAvailableId               Int
  condemnationRoomAvailableId             Int
  hangingExaminationFacilitiesAvailableId Int
  holdingPenAvailableId                   Int
  isolationPenAvailableId                 Int
  chuteAvailableId                        Int
  genderFriendlyAvailableId               Int
  comfortRoomAvailableId                  Int
  wheelBathAvailableId                    Int
  footbathAvailableId                     Int
  meatInspectorOfficeAvailableId          Int
  dressingFloorAvailableId                Int
}

model Cemetery {
  id                       Int               @id @default(autoincrement())
  SanitationSection        SanitationSection @relation(fields: [sanitationSectionId], references: [id])
  sextonAvailability       YesNo             @relation("sextonAvailability", fields: [sextonAvailabilityId], references: [id])
  sextonOfficeAvailability YesNo             @relation("sextonOfficeAvailability", fields: [sextonOfficeAvailabilityId], references: [id])
  layoutCemeteryAdequacy   YesNo             @relation("layoutCemeteryAdequacy", fields: [layoutCemeteryAdequacyId], references: [id])
  cemeteryFenced           YesNo             @relation("cemeteryFenced", fields: [cemeteryFencedId], references: [id])
  cremationPracticed       YesNo             @relation("cremationPracticed", fields: [cremationPracticedId], references: [id])
  cremationPlatform        YesNo             @relation("cremationPlatform", fields: [cremationPlatformId], references: [id])
  ashesDisposal            YesNo             @relation("ashesDisposal", fields: [ashesDisposalId], references: [id])

  deleted                    Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  sanitationSectionId        Int
  layoutCemeteryAdequacyId   Int
  cemeteryFencedId           Int
  cremationPracticedId       Int
  cremationPlatformId        Int
  ashesDisposalId            Int
  sextonAvailabilityId       Int
  sextonOfficeAvailabilityId Int
}

model TransferWasteStation {
  id                      Int               @id @default(autoincrement())
  SanitationSection       SanitationSection @relation(fields: [sanitationSectionId], references: [id])
  transferStationCapacity Int
  wasteSorting            YesNo             @relation(fields: [wasteSortingId], references: [id])
  leachateManagement      YesNo             @relation(fields: [leachateManagementId], references: [id])
  hazardousManagement     YesNo             @relation(fields: [hazardousManagementId], references: [id])


  deleted               Int?     @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  sanitationSectionId   Int
  wasteSortingId        Int
  leachateManagementId  Int
  hazardousManagementId Int
}

model CommunalContainer {
  id                   Int               @id @default(autoincrement())
  SanitationSection    SanitationSection @relation(fields: [sanitationSectionId], references: [id])
  attendantName        String            @db.VarChar(255)
  attendantPhoneNumber String            @db.VarChar(255)
  serviceProviderName  String            @db.VarChar(255)
  scheduledCollection  YesNo             @relation(fields: [yesNoId], references: [id])
  containerVolume      Int
  containerCondition   GoodBad           @relation(fields: [goodBadId], references: [id])
  numberContainers     Int


  deleted             Int?     @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  sanitationSectionId Int
  yesNoId             Int
  goodBadId           Int
}

// slaughter_house
// slaughter_slab
// cemetery
// transfer_station_waste
// public_toilet
// communal_container
// others

model SanitaryFacilityType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SanitationSection SanitationSection[]
}

model GoodBad {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  HygieneSection    HygieneSection[]
  CommunalContainer CommunalContainer[]
}
