generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inspection {
  id               String  @id @db.VarChar(255)
  prevInspectionId String? @unique @db.VarChar(255)
  premisesCode     String? @db.VarChar(255)
  districtId       Int
  regionId         Int
  electoralAreaId  Int
  communityId      Int

  userId                         Int
  inspectionFormId               Int
  inspectionTypeId               Int
  isPublished                    Int                             @default(0)
  rejected                       Int                             @default(-1)
  publishedById                  Int?
  followUpDate                   String?                         @db.VarChar(255)
  doFollowUp                     Int?
  deleted                        Int?                            @default(0)
  isReinspected                  Int?                            @default(0)
  isFollowedUp                   Int?                            @default(0)
  totalRating                    Int?
  updated                        Int?                            @default(0)
  isCompleted                    Int?                            @default(1)
  isSubmitted                    Int?                            @default(1)
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  startedAt                      DateTime
  completedAt                    DateTime
  BasicInfoSection               BasicInfoSection?
  ConclusionSection              ConclusionSection?
  InspectionForm                 InspectionForm?                 @relation(fields: [inspectionFormId], references: [id])
  InspectionType                 InspectionType?                 @relation(fields: [inspectionTypeId], references: [id])
  publishedBy                    User?                           @relation("publishedBy", fields: [publishedById], references: [id])
  User                           User                            @relation(fields: [userId], references: [id])
  LicencePermitSection           LicencePermitSection?
  LiquidWasteSection             LiquidWasteSection?
  SolidWasteSection              SolidWasteSection?
  WaterSection                   WaterSection?
  ResidentialPremisesInfoSection ResidentialPremisesInfoSection?
  EateryPremisesInfoSection      EateryPremisesInfoSection?
  HealthPremisesInfoSection      HealthPremisesInfoSection?
  HospitalityPremisesInfoSection HospitalityPremisesInfoSection?
  SanitaryPremisesInfoSection    SanitaryPremisesInfoSection?
  MarketPremisesInfoSection      MarketPremisesInfoSection?
  InstitutionPremisesInfoSection InstitutionPremisesInfoSection?
  IndustryPremisesInfoSection    IndustryPremisesInfoSection?
  District                       District                        @relation(fields: [districtId], references: [id])
  Region                         Region                          @relation(fields: [regionId], references: [id])
  ElectoralArea                  ElectoralArea                   @relation(fields: [electoralAreaId], references: [id])
  Community                      Community                       @relation(fields: [communityId], references: [id])

  prevInspection Inspection? @relation("CurrentPreviousInspection", fields: [prevInspectionId], references: [id])

  currentInspection                  Inspection?                          @relation("CurrentPreviousInspection")
  InspectionPictures                 InspectionPictures[]
  FollowUpInspection                 FollowUpInspection[]
  NotApplicable                      NotApplicable[]
  FollowUpInspectionHistory          FollowUpInspectionHistory?
  PremisesWaterSources               PremisesWaterSources[]
  PremisesWaterTreatmentType         PremisesWaterTreatmentType[]
  PremisesWaterSupply                PremisesWaterSupply[]
  PremisesWaterStorage               PremisesWaterStorage[]
  PremisesUnsafeWaterStorage         PremisesUnsafeWaterStorage[]
  PremisesCommunalContainerCondition PremisesCommunalContainerCondition[]
  PremisesDrinkingWaterSources       PremisesDrinkingWaterSources[]
  PremisesToiletType                 PremisesToiletType[]
  PremisesEffluentManagement         PremisesEffluentManagement[]
  PremisesExcretaDisposalMethod      PremisesExcretaDisposalMethod[]
  PremisesExcretaContainment         PremisesExcretaContainment[]
  PremisesGreyWaterDisposal          PremisesGreyWaterDisposal[]
  PremisesWasteReceptacle            PremisesWasteReceptacle[]
  PremisesPestSigns                  PremisesPestSigns[]
  PremisesAnimal                     PremisesAnimal[]
  PremisesDrainType                  PremisesDrainType[]
  PremisesDrainBadCondition          PremisesDrainBadCondition[]
  PremisesHazardousWasteDisposal     PremisesHazardousWasteDisposal[]
  PremisesActionTaken                PremisesActionTaken[]
  PremisesNuisanceDetected           PremisesNuisanceDetected[]
}

model InspectionHistory {
  historyId Int @id @default(autoincrement())

  id               String  @db.VarChar(255)
  prevInspectionId String? @db.VarChar(255)
  premisesCode     String? @db.VarChar(255)
  districtId       Int
  regionId         Int
  electoralAreaId  Int
  communityId      Int

  userId           Int
  inspectionFormId Int
  inspectionTypeId Int
  isPublished      Int     @default(0)
  rejected         Int     @default(-1)
  publishedById    Int?
  followUpDate     String? @db.VarChar(255)
  doFollowUp       Int?
  deleted          Int?    @default(0)
  isReinspected    Int?    @default(0)
  isFollowedUp     Int?    @default(0)
  isCompleted      Int?    @default(1)
  isSubmitted      Int?    @default(1)
  totalRating      Int?
  updated          Int?    @default(0)

  createdAt                                 DateTime                                    @default(now())
  updatedAt                                 DateTime                                    @updatedAt
  startedAt                                 DateTime
  completedAt                               DateTime
  BasicInfoSectionHistory                   BasicInfoSectionHistory[]
  ResidentialPremisesInfoSectionHistory     ResidentialPremisesInfoSectionHistory[]
  EateryPremisesInfoSectionHistory          EateryPremisesInfoSectionHistory[]
  HealthPremisesInfoSectionHistory          HealthPremisesInfoSectionHistory[]
  HospitalityPremisesInfoSectionHistory     HospitalityPremisesInfoSectionHistory[]
  SanitaryPremisesInfoSectionHistory        SanitaryPremisesInfoSectionHistory[]
  MarketPremisesInfoSectionHistory          MarketPremisesInfoSectionHistory[]
  InstitutionPremisesInfoSectionHistory     InstitutionPremisesInfoSectionHistory[]
  IndustryPremisesInfoSectionHistory        IndustryPremisesInfoSectionHistory[]
  LicencePermitSectionHistory               LicencePermitSectionHistory[]
  WaterSectionHistory                       WaterSectionHistory[]
  LiquidWasteSectionHistory                 LiquidWasteSectionHistory[]
  SolidWasteSectionHistory                  SolidWasteSectionHistory[]
  ConclusionSectionHistory                  ConclusionSectionHistory[]
  PremisesWaterSourcesHistory               PremisesWaterSourcesHistory[]
  PremisesWaterTreatmentTypeHistory         PremisesWaterTreatmentTypeHistory[]
  PremisesWaterSupplyHistory                PremisesWaterSupplyHistory[]
  PremisesWaterStorageHistory               PremisesWaterStorageHistory[]
  PremisesUnsafeWaterStorageHistory         PremisesUnsafeWaterStorageHistory[]
  PremisesCommunalContainerConditionHistory PremisesCommunalContainerConditionHistory[]
  PremisesDrinkingWaterSourcesHistory       PremisesDrinkingWaterSourcesHistory[]
  PremisesToiletTypeHistory                 PremisesToiletTypeHistory[]
  PremisesEffluentManagementHistory         PremisesEffluentManagementHistory[]
  PremisesExcretaDisposalMethodHistory      PremisesExcretaDisposalMethodHistory[]
  PremisesExcretaContainmentHistory         PremisesExcretaContainmentHistory[]
  PremisesGreyWaterDisposalHistory          PremisesGreyWaterDisposalHistory[]
  PremisesWasteReceptacleHistory            PremisesWasteReceptacleHistory[]
  PremisesPestSignsHistory                  PremisesPestSignsHistory[]
  PremisesAnimalHistory                     PremisesAnimalHistory[]
  PremisesDrainTypeHistory                  PremisesDrainTypeHistory[]
  PremisesDrainBadConditionHistory          PremisesDrainBadConditionHistory[]
  PremisesHazardousWasteDisposalHistory     PremisesHazardousWasteDisposalHistory[]
  PremisesActionTakenHistory                PremisesActionTakenHistory[]
  PremisesNuisanceDetectedHistory           PremisesNuisanceDetectedHistory[]
}

model InspectionForm {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  code       String       @db.VarChar(2)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]

  PremisesSubtype           PremisesSubtype[]
  PremisesType              PremisesType[]
  Nuisance                  Nuisance[]
  RespondentDesignation     RespondentDesignation[]
  FollowUpInspection        FollowUpInspection[]
  FollowUpInspectionHistory FollowUpInspectionHistory[]
  Service                   Service[]
  PremisesService           PremisesService[]
}

model PasswordResetRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  tempPassword String   @db.VarChar(255)
  deleted      Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id])
}

model User {
  id           Int     @id @default(autoincrement())
  fcmId        String? @db.VarChar(255)
  userRoleId   Int
  surname      String  @db.VarChar(255)
  otherNames   String  @db.VarChar(255)
  email        String  @unique @db.VarChar(255)
  phoneNumber  String  @unique @db.VarChar(255)
  designation  String  @db.VarChar(255)
  password     String  @db.VarChar(255)
  tempPassword String? @db.VarChar(255)
  imagePath    String? @db.VarChar(255)

  regionId        Int?
  districtId      Int?
  electoralAreaId Int?
  loginTimes      Int?     @default(0)
  passwordChanged Int?     @default(0)
  activated       Int?     @default(1)
  deleted         Int?     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  UserLevel                      UserLevel                        @relation(fields: [userLevelId], references: [id])
  BasicInfoSection               BasicInfoSection[]
  ConclusionSection              ConclusionSection[]
  publishedBy                    Inspection[]                     @relation("publishedBy")
  Inspection                     Inspection[]
  LicencePermitSection           LicencePermitSection[]
  LiquidWasteSection             LiquidWasteSection[]
  Logs                           Logs[]
  PasswordResetRequest           PasswordResetRequest[]
  PremisesActionTaken            PremisesActionTaken[]
  PremisesAnimal                 PremisesAnimal[]
  PremisesDrainType              PremisesDrainType[]
  PremisesDrinkingWaterSources   PremisesDrinkingWaterSources[]
  PremisesEffluentManagement     PremisesEffluentManagement[]
  PremisesExcretaContainment     PremisesExcretaContainment[]
  PremisesExcretaDisposalMethod  PremisesExcretaDisposalMethod[]
  PremisesGreyWaterDisposal      PremisesGreyWaterDisposal[]
  PremisesHazardousWasteDisposal PremisesHazardousWasteDisposal[]
  PremisesNuisanceDetected       PremisesNuisanceDetected[]
  PremisesPestSigns              PremisesPestSigns[]
  PremisesToiletType             PremisesToiletType[]
  // PremisesWasteCollection        PremisesWasteCollection[]
  PremisesWasteReceptacle        PremisesWasteReceptacle[]
  PremisesWaterSources           PremisesWaterSources[]
  PremisesWaterStorage           PremisesWaterStorage[]
  PremisesWaterSupply            PremisesWaterSupply[]
  PremisesWaterTreatmentType     PremisesWaterTreatmentType[]
  SolidWasteSection              SolidWasteSection[]
  District                       District?                        @relation(fields: [districtId], references: [id])
  ElectoralArea                  ElectoralArea?                   @relation(fields: [electoralAreaId], references: [id])
  Region                         Region?                          @relation(fields: [regionId], references: [id])
  UserRole                       UserRole?                        @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  WaterSection                   WaterSection[]
  EateryPremisesInfoSection      EateryPremisesInfoSection[]
  HealthPremisesInfoSection      HealthPremisesInfoSection[]
  HospitalityPremisesInfoSection HospitalityPremisesInfoSection[]
  SanitaryPremisesInfoSection    SanitaryPremisesInfoSection[]
  MarketPremisesInfoSection      MarketPremisesInfoSection[]
  InstitutionPremisesInfoSection InstitutionPremisesInfoSection[]
  IndustryPremisesInfoSection    IndustryPremisesInfoSection[]
  ResidentialPremisesInfoSection ResidentialPremisesInfoSection[]
  PremisesUnsafeWaterStorage     PremisesUnsafeWaterStorage[]
  PremisesDrainBadCondition      PremisesDrainBadCondition[]

  // addedByUserId Int?  @unique
  // addedBy       User? @relation("AddedByUser", fields: [addedByUserId], references: [id])

  // addedUser User? @relation("AddedByUser")

  adder                              UserAddedByUser[]                    @relation("adder")
  addee                              UserAddedByUser[]                    @relation("addee")
  assignedTo                         AssignData[]                         @relation("assignedTo")
  assignedFrom                       AssignData[]                         @relation("assignedFrom")
  PremisesCommunalContainerCondition PremisesCommunalContainerCondition[]
  userLevelId                        Int
  NotApplicable                      NotApplicable[]
  FollowupPremisesActionTaken        FollowupPremisesActionTaken[]
  FollowupPremisesNuisanceDetected   FollowupPremisesNuisanceDetected[]
  UserGuide                          UserGuide[]
  Sender                             Messaging[]                          @relation("sender")
  Recipient                          Messaging[]                          @relation("individualRecipient")
  AssignData                         AssignData[]
}

model UserAddedByUser {
  id Int @id @default(autoincrement())

  adder     User?    @relation("adder", fields: [adderId], references: [id])
  addee     User?    @relation("addee", fields: [addeeId], references: [id])
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adderId   Int?
  addeeId   Int?
}

model UserLevel {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // UserRole  UserRole[]
  User      User[]
}

model Messaging {
  id         Int     @id @default(autoincrement())
  title      String? @db.VarChar(255)
  message    String  @db.VarChar(2550)
  // recipientGroup String?
  // recipientId Int?
  districtId Int?

  messageType         Int?
  sendingType         Int?
  sender              Int
  individualRecipient Int?
  regionId            Int?

  deleted     Int?         @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  MessageType MessageType? @relation(fields: [messageType], references: [id])
  SendingType SendingType? @relation(fields: [sendingType], references: [id])
  Recipient   User?        @relation("individualRecipient", fields: [individualRecipient], references: [id])
  Sender      User         @relation("sender", fields: [sender], references: [id])
  District    District?    @relation(fields: [districtId], references: [id])
  Region      Region?      @relation(fields: [regionId], references: [id])
}

model SendingType {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  deleted   Int?        @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Messaging Messaging[]
}

model MessageType {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  deleted   Int?        @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Messaging Messaging[]
}

model UserRole {
  id                        Int    @id @default(autoincrement())
  name                      String @unique @db.VarChar(255)
  userUpdatesAllowed        Int?   @default(0)
  userDeletionAllowed       Int?   @default(0)
  inspectionUpdatesAllowed  Int?   @default(0)
  inspectionPublishAllowed  Int?   @default(0)
  inspectionDeletionAllowed Int?   @default(0)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User             User[]
  PageAccess       PageAccess[]
  PageActionAccess PageActionAccess[]
}

model PageAccess {
  id         Int      @id @default(autoincrement())
  pageId     Int
  userRoleId Int
  deleted    Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Page       Page     @relation(fields: [pageId], references: [id])
  UserRole   UserRole @relation(fields: [userRoleId], references: [id])
}

model Page {
  id   Int     @id @default(autoincrement())
  name String  @unique @db.VarChar(255)
  path String? @unique @db.VarChar(255)
  icon String? @db.VarChar(255)

  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PageAccess PageAccess[]
  PageAction PageAction[] @relation("PageToPageAction")
}

model PageAction {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Page             Page[]             @relation("PageToPageAction")
  PageActionAccess PageActionAccess[]
}

model PageActionAccess {
  id           Int        @id @default(autoincrement())
  userRoleId   Int
  pageActionId Int
  deleted      Int?       @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  PageAction   PageAction @relation(fields: [pageActionId], references: [id])
  UserRole     UserRole   @relation(fields: [userRoleId], references: [id])
}

// model PageActionsAllowed {
//   id              Int  @id @default(autoincrement())
//   deletionAllowed Int? @default(0)
//   updateAllowed   Int? @default(0)

//   deleted    Int?     @default(0)
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   UserRole   UserRole @relation(fields: [userRoleId], references: [id])
//   userRoleId Int
// }

// model PageAction {
//   id               Int                @id @default(autoincrement())
//   name             String             @db.VarChar(255)
//   deleted          Int?               @default(0)
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   PageActionAccess PageActionAccess[]
//   Page             Page[]             @relation("PageToPageAction")
// }

model Action {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @db.VarChar(255)
  deleted                     Int?                          @default(0)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  PremisesActionTaken         PremisesActionTaken[]
  FollowupPremisesActionTaken FollowupPremisesActionTaken[]
}

model AnimalType {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  deleted        Int?             @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PremisesAnimal PremisesAnimal[]
}

model DrainBadCondition {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  deleted                   Int?                        @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  PremisesDrainBadCondition PremisesDrainBadCondition[]
}

model CemeteryWorkers {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CleaningFrequency {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  deleted                   Int?                        @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  MarketPremisesInfoSection MarketPremisesInfoSection[]
}

model Community {
  id              Int    @id @default(autoincrement())
  name            String @db.VarChar(255)
  electoralAreaId Int?
  districtId      Int?

  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BasicInfoSection BasicInfoSection[]
  ElectoralArea    ElectoralArea?     @relation(fields: [electoralAreaId], references: [id])
  District         District?          @relation(fields: [districtId], references: [id])
  Inspection       Inspection[]

  @@unique([electoralAreaId, name], name: "electoralAreaIdIdentifier")
}

model ElectoralArea {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  districtId Int
  District   District     @relation(fields: [districtId], references: [id])
  User       User[]
  Community  Community[]
  Inspection Inspection[]
}

model ContainerVolume {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SolidWasteSection SolidWasteSection[]
}

model DerattingFrequency {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  deleted                   Int?                        @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  MarketPremisesInfoSection MarketPremisesInfoSection[]
}

model DesiltingFrequency {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
}

model DisinfectionFrequency {
  id                            Int                           @id @default(autoincrement())
  name                          String
  deleted                       Int?                          @default(0)
  createdAt                     DateTime                      @default(now())
  updatedAt                     DateTime                      @updatedAt
  disinfectionFrequencySanitary SanitaryPremisesInfoSection[] @relation("disinfectionFrequency")

  disinfectionFrequencyEatery EateryPremisesInfoSection[] @relation("disinfectionFrequency")
  disinfestionFrequencyEatery EateryPremisesInfoSection[] @relation("disinfestationFrequency")
}

model DrainType {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
  PremisesDrainType  PremisesDrainType[]
}

model DrinkingWaterSourceType {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(255)
  deleted                      Int?                           @default(0)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  PremisesDrinkingWaterSources PremisesDrinkingWaterSources[]
}

model EaseYourselfWhere {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
}

model EffluentManagement {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  LiquidWasteSection         LiquidWasteSection[]
  PremisesEffluentManagement PremisesEffluentManagement[]
}

model ExcretaContainment {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  LiquidWasteSection         LiquidWasteSection[]
  PremisesExcretaContainment PremisesExcretaContainment[]
}

model ExcretaDisposalMethod {
  id                            Int                             @id @default(autoincrement())
  name                          String                          @db.VarChar(255)
  deleted                       Int?                            @default(0)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  LiquidWasteSection            LiquidWasteSection[]
  PremisesExcretaDisposalMethod PremisesExcretaDisposalMethod[]
}

model GreyWaterDisposal {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(255)
  deleted                   Int?                        @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  PremisesGreyWaterDisposal PremisesGreyWaterDisposal[]
}

model HazardousWasteDisposalMethod {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @db.VarChar(255)
  deleted                        Int?                             @default(0)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  PremisesHazardousWasteDisposal PremisesHazardousWasteDisposal[]
}

model Nuisance {
  id               Int    @id @default(autoincrement())
  name             String @db.VarChar(255)
  inspectionFormId Int

  deleted                          Int?                               @default(0)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  PremisesNuisanceDetected         PremisesNuisanceDetected[]
  InspectionForm                   InspectionForm                     @relation(fields: [inspectionFormId], references: [id])
  FollowupPremisesNuisanceDetected FollowupPremisesNuisanceDetected[]
}

// model InspectionFormNuisances {
//   id               Int      @id @default(autoincrement())
//   nuisanceId       Int
//   inspectionFormId Int
//   deleted          Int?     @default(0)
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//   Nuisance         Nuisance @relation(fields: [nuisanceId], references: [id])
// }

model OwnershipType {
  id                        Int                           @id @default(autoincrement())
  name                      String                        @db.VarChar(255)
  deleted                   Int?                          @default(0)
  createdAt                 DateTime                      @default(now())
  updatedAt                 DateTime                      @updatedAt
  HealthPremisesInfoSection HealthPremisesInfoSection[]
  ownershipTypeSanitary     SanitaryPremisesInfoSection[] @relation("ownershipTypeSanitary")
  MarketPremisesInfoSection MarketPremisesInfoSection[]
}

model PestSign {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PremisesPestSigns PremisesPestSigns[]
}

model Region {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  abbrv      String       @unique @db.VarChar(10)
  code       String       @unique @db.VarChar(2)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  District   District[]
  User       User[]
  Inspection Inspection[]
  Messaging  Messaging[]
}

model District {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  abbrv            String?            @unique @db.VarChar(255)
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  regionId         Int
  Community        Community[]
  Region           Region             @relation(fields: [regionId], references: [id])
  ElectoralArea    ElectoralArea[]
  User             User[]
  SanitationReport SanitationReport[]
  Inspection       Inspection[]
  Messaging        Messaging[]
}

model RespondentDesignation {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  inspectionFormId Int
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BasicInfoSection BasicInfoSection[]

  InspectionForm InspectionForm @relation(fields: [inspectionFormId], references: [id])
}

model SafeUnsafe {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model SanitaryInsanitary {
  id                Int                  @id @default(autoincrement())
  name              String               @db.VarChar(255)
  deleted           Int?                 @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  toiletCondition   LiquidWasteSection[] @relation("toiletCondition")
  bathroomCondition LiquidWasteSection[] @relation("bathroomCondition")

  urinalCubicleCondition          LiquidWasteSection[]             @relation("urinalCubicleCondition")
  animalSpaceCondition            ResidentialPremisesInfoSection[] @relation("animalSpaceCondition")
  sanitaryAshesDisposal           SanitaryPremisesInfoSection[]    @relation("sanitaryAshesDisposal")
  sanitaryContainer               SolidWasteSection[]              @relation("sanitaryContainer")
  animalSpaceConditionInstitution InstitutionPremisesInfoSection[] @relation("animalSpaceCondition")
  byProductsStorageAreaCond       IndustryPremisesInfoSection[]    @relation("byProductsStorageAreaCond")
  productionRoomCondition         IndustryPremisesInfoSection[]    @relation("productionRoomCondition")
  slaughterAreaCondition          InstitutionPremisesInfoSection[] @relation("slaughterAreaCondition")
  ablutionSlabCondition           InstitutionPremisesInfoSection[] @relation("ablutionSlabCondition")
  coldRoomCondition               HealthPremisesInfoSection[]      @relation("coldRoomCondition")
  embalmingAreaCondition          HealthPremisesInfoSection[]      @relation("embalmingAreaCondition")
  boardingHouseCondition          InstitutionPremisesInfoSection[] @relation("boardingHouseCondition")
  generalSanitaryCondition        MarketPremisesInfoSection[]      @relation("generalSanitaryCondition")
}

model SewerSystem {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StructureType {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @db.VarChar(255)
  deleted                        Int?                             @default(0)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  HospitalityPremisesInfoSection HospitalityPremisesInfoSection[]
  SanitaryPremisesInfoSection    SanitaryPremisesInfoSection[]
  EateryPremisesInfoSection      EateryPremisesInfoSection[]
  MarketPremisesInfoSection      MarketPremisesInfoSection[]
  InstitutionPremisesInfoSection InstitutionPremisesInfoSection[]
  IndustryPremisesInfoSection    IndustryPremisesInfoSection[]
}

model PremisesType {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @db.VarChar(255)
  deleted                        Int?                             @default(0)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  inspectionFormId               Int
  eateryPremisesType             EateryPremisesInfoSection[]      @relation("eateryPremisesType")
  healthPremisesType             HealthPremisesInfoSection[]      @relation("healthPremisesType")
  hospitalityPremisesType        HospitalityPremisesInfoSection[] @relation("hospitalityPremisesType")
  sanitaryPremisesType           SanitaryPremisesInfoSection[]    @relation("sanitaryPremisesType")
  PremisesSubtype                PremisesSubtype[]
  InspectionForm                 InspectionForm                   @relation(fields: [inspectionFormId], references: [id])
  IndustryPremisesInfoSection    IndustryPremisesInfoSection[]
  InstitutionPremisesInfoSection InstitutionPremisesInfoSection[]
  MarketPremisesInfoSection      MarketPremisesInfoSection[]
  PremisesService                PremisesService[]

  @@unique([inspectionFormId, name], name: "inspectionFormName")
}

model Service {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
  premisesTypeId   Int?
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
}

model PremisesService {
  id               Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  deleted          Int?           @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionFormId Int
  premisesTypeId   Int?
  InspectionForm   InspectionForm @relation(fields: [inspectionFormId], references: [id])
  PremisesType     PremisesType?  @relation(fields: [premisesTypeId], references: [id])
}

model PremisesSubtype {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @db.VarChar(255)
  deleted                        Int?                             @default(0)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  inspectionFormId               Int
  premisesTypeId                 Int
  eateryPremisesSubType          EateryPremisesInfoSection[]      @relation("eateryPremisesSubType")
  InspectionForm                 InspectionForm                   @relation(fields: [inspectionFormId], references: [id])
  PremisesType                   PremisesType                     @relation(fields: [premisesTypeId], references: [id])
  IndustryPremisesInfoSection    IndustryPremisesInfoSection[]
  InstitutionPremisesInfoSection InstitutionPremisesInfoSection[]

  @@unique([premisesTypeId, name], name: "typeName")
}

model ToiletPitPosition {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToiletHouseholdNumber {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LiquidWasteSection LiquidWasteSection[]
}

model ToiletDischarge {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToiletType {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  deleted            Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PremisesToiletType PremisesToiletType[]
}

model UnsafeToiletCondition {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunalContainerCondition {
  id                                 Int                                  @id @default(autoincrement())
  name                               String                               @db.VarChar(255)
  deleted                            Int?                                 @default(0)
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  PremisesCommunalContainerCondition PremisesCommunalContainerCondition[]
}

model UnsafeWaterStorage {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  PremisesUnsafeWaterStorage PremisesUnsafeWaterStorage[]
}

model UnservicedWasteDisposal {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SolidWasteSection SolidWasteSection[]
}

model WasteCollectionFrequency {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SolidWasteSection SolidWasteSection[]
}

model WasteCollectionType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  deleted           Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // PremisesWasteCollection PremisesWasteCollection[]
  SolidWasteSection SolidWasteSection[]
}

model SolidWasteReceptacle {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  deleted                 Int?                      @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  PremisesWasteReceptacle PremisesWasteReceptacle[]
}

model WasteWaterContainment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaterFlowFrequency {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  deleted      Int?           @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WaterSection WaterSection[]
}

model WaterSourceType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  deleted              Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  PremisesWaterSources PremisesWaterSources[]
}

model WaterStorageType {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  PremisesWaterStorage       PremisesWaterStorage[]
  PremisesUnsafeWaterStorage PremisesUnsafeWaterStorage[]
}

model WaterSupplyType {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  deleted             Int?                  @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PremisesWaterSupply PremisesWaterSupply[]
}

model WaterTreatmentType {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  PremisesWaterTreatmentType PremisesWaterTreatmentType[]
}

model YesNo {
  id                                                 Int                              @id @default(autoincrement())
  name                                               String                           @db.VarChar(255)
  deleted                                            Int?                             @default(0)
  createdAt                                          DateTime                         @default(now())
  updatedAt                                          DateTime                         @updatedAt
  obnoxiousTradeExist                                ConclusionSection[]              @relation("obnoxiousTradeExist")
  approvedHandwashingFacilityAvailabilityEatery      EateryPremisesInfoSection[]      @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityEatery                         EateryPremisesInfoSection[]      @relation("bathroomAvailability")
  drainsAvailabilityEatery                           EateryPremisesInfoSection[]      @relation("drainsAvailability")
  firstAidAvailabilityEatery                         EateryPremisesInfoSection[]      @relation("firstAidAvailability")
  toiletAvailabilityEatery                           EateryPremisesInfoSection[]      @relation("toiletAvailability")
  urinalAvailabilityEatery                           EateryPremisesInfoSection[]      @relation("urinalAvailability")
  approvedHandwashingFacilityAvailabilityHealth      HealthPremisesInfoSection[]      @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityHealth                         HealthPremisesInfoSection[]      @relation("bathroomAvailability")
  drainsAvailabilityHealth                           HealthPremisesInfoSection[]      @relation("drainsAvailability")
  ehoAvailability                                    HealthPremisesInfoSection[]      @relation("ehoAvailability")
  separateWard                                       HealthPremisesInfoSection[]      @relation("separateWard")
  toiletAvailabilityHealth                           HealthPremisesInfoSection[]      @relation("toiletAvailability")
  urinalAvailabilityHealth                           HealthPremisesInfoSection[]      @relation("urinalAvailability")
  approvedHandwashingFacilityAvailabilityHosp        HospitalityPremisesInfoSection[] @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityHosp                           HospitalityPremisesInfoSection[] @relation("bathroomAvailability")
  cookedFoodStorageCondtionSafe                      HospitalityPremisesInfoSection[] @relation("cookedFoodStorageCondtionSafe")
  drainsAvailabilityHosp                             HospitalityPremisesInfoSection[] @relation("drainsAvailability")
  toiletAvailabilityHosp                             HospitalityPremisesInfoSection[] @relation("toiletAvailability")
  uncookedFoodStorageCondtionSafe                    HospitalityPremisesInfoSection[] @relation("uncookedFoodStorageCondtionSafe")
  urinalAvailabilityHosp                             HospitalityPremisesInfoSection[] @relation("urinalAvailability")
  approvedHandwashingFacilityAvailabilityIndustry    IndustryPremisesInfoSection[]    @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityIndustry                       IndustryPremisesInfoSection[]    @relation("bathroomAvailability")
  drainsAvailabilityIndustry                         IndustryPremisesInfoSection[]    @relation("drainsAvailability")
  toiletAvailabilityIndustry                         IndustryPremisesInfoSection[]    @relation("toiletAvailability")
  urinalAvailabilityIndustry                         IndustryPremisesInfoSection[]    @relation("urinalAvailability")
  approvedHandwashingFacilityAvailabilityInstitution InstitutionPremisesInfoSection[] @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityInstitution                    InstitutionPremisesInfoSection[] @relation("bathroomAvailability")
  drainsAvailabilityInstitution                      InstitutionPremisesInfoSection[] @relation("drainsAvailability")
  toiletAvailabilityInstitution                      InstitutionPremisesInfoSection[] @relation("toiletAvailability")
  urinalAvailabilityInstitution                      InstitutionPremisesInfoSection[] @relation("urinalAvailability")
  animalsPermitAvailability                          LicencePermitSection[]           @relation("animalsPermitAvailability")
  buildingPermitAvailability                         LicencePermitSection[]           @relation("buildingPermitAvailability")
  businessLicenceAvailability                        LicencePermitSection[]           @relation("businessLicenceAvailability")
  fumigationCertificateAvailability                  LicencePermitSection[]           @relation("fumigationCertificateAvailability")
  habitationCertificateAvailability                  LicencePermitSection[]           @relation("habitationCertificateAvailability")
  operatingLicenceAvailability                       LicencePermitSection[]           @relation("operatingLicenceAvailability")
  propertyRateAvailability                           LicencePermitSection[]           @relation("propertyRateAvailability")
  structurePermitAvailability                        LicencePermitSection[]           @relation("structurePermitAvailability")
  analCleansingMaterialMgt                           LiquidWasteSection[]             @relation("analCleansingMaterialMgt")
  areaSewered                                        LiquidWasteSection[]             @relation("areaSewered")
  availToiletFaciltyMgt                              LiquidWasteSection[]             @relation("availToiletFaciltyMgt")
  bathroomAdequacy                                   LiquidWasteSection[]             @relation("bathroomAdequacy")
  containmentEmptied                                 LiquidWasteSection[]             @relation("containmentEmptied")
  drainsConditionLiquidWaste                         LiquidWasteSection[]             @relation("drainsCondition")
  effluentManagementReport                           LiquidWasteSection[]             @relation("effluentManagementReport")
  facilityConnectedSewer                             LiquidWasteSection[]             @relation("facilityConnectedSewer")
  separateStaffUrinal                                LiquidWasteSection[]             @relation("separateStaffUrinal")
  sewerSystem                                        LiquidWasteSection[]             @relation("sewerSystem")
  stagnationEvidence                                 LiquidWasteSection[]             @relation("stagnationEvidence")
  toiletAdequacy                                     LiquidWasteSection[]             @relation("toiletAdequacy")
  toiletDisabilityFriendly                           LiquidWasteSection[]             @relation("toiletDisabilityFriendly")
  toiletDischarge                                    LiquidWasteSection[]             @relation("toiletDischarge")
  toiletGenderSensivity                              LiquidWasteSection[]             @relation("toiletGenderSensivity")
  toiletPitPosition                                  LiquidWasteSection[]             @relation("toiletPitPosition")
  urinalAdequacy                                     LiquidWasteSection[]             @relation("urinalAdequacy")
  urinalDisabilityFriendly                           LiquidWasteSection[]             @relation("urinalDisabilityFriendly")
  urinalGenderSensivity                              LiquidWasteSection[]             @relation("urinalGenderSensivity")
  wasteWaterContainment                              LiquidWasteSection[]             @relation("wasteWaterContainment")
  approvedHandwashingFacilityAvailabilityMarket      MarketPremisesInfoSection[]      @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityMarket                         MarketPremisesInfoSection[]      @relation("bathroomAvailability")
  drainsAvailabilityMarket                           MarketPremisesInfoSection[]      @relation("drainsAvailability")
  toiletAvailabilityMarket                           MarketPremisesInfoSection[]      @relation("toiletAvailability")
  urinalAvailabilityMarket                           MarketPremisesInfoSection[]      @relation("urinalAvailability")
  animalAvailability                                 ResidentialPremisesInfoSection[] @relation("animalAvailability")
  approvedHandwashingFacilityAvailabilityResidential ResidentialPremisesInfoSection[] @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailabilityResidential                    ResidentialPremisesInfoSection[] @relation("bathroomAvailability")
  drainsAvailabilityResidential                      ResidentialPremisesInfoSection[] @relation("drainsAvailability")
  toiletAvailabilityResidential                      ResidentialPremisesInfoSection[] @relation("toiletAvailability")
  vaccinationProof                                   ResidentialPremisesInfoSection[] @relation("vaccinationProof")
  approvedHandwashingFacilityAvailability            SanitaryPremisesInfoSection[]    @relation("approvedHandwashingFacilityAvailability")
  bathroomAvailability                               SanitaryPremisesInfoSection[]    @relation("bathroomAvailability")
  cloakRoomAvailability                              SanitaryPremisesInfoSection[]    @relation("cloakRoomAvailability")
  comfortRoomAvailability                            SanitaryPremisesInfoSection[]    @relation("comfortRoomAvailability")
  condemnationRoomAvailability                       SanitaryPremisesInfoSection[]    @relation("condemnationRoomAvailability")
  cremationPlatform                                  SanitaryPremisesInfoSection[]    @relation("cremationPlatform")
  cremationPracticed                                 SanitaryPremisesInfoSection[]    @relation("cremationPracticed")
  disinfestationQuarterly                            SanitaryPremisesInfoSection[]    @relation("disinfestationQuarterly")
  drainsAvailability                                 SanitaryPremisesInfoSection[]    @relation("drainsAvailability")
  siteFenced                                         SanitaryPremisesInfoSection[]    @relation("siteFenced")
  firstAidAvailability                               SanitaryPremisesInfoSection[]    @relation("firstAidAvailability")
  footbathAvailability                               SanitaryPremisesInfoSection[]    @relation("footbathAvailability")
  leachateMgt                                        SanitaryPremisesInfoSection[]    @relation("leachateMgt")
  properLayout                                       SanitaryPremisesInfoSection[]    @relation("properLayout")
  protectiveClothing                                 SanitaryPremisesInfoSection[]    @relation("protectiveClothing")
  safeHazardousWasteMgt                              SanitaryPremisesInfoSection[]    @relation("safeHazardousWasteMgt")
  sanitaryFacilityMgt                                SanitaryPremisesInfoSection[]    @relation("sanitaryFacilityMgt")
  scheduleLifting                                    SolidWasteSection[]              @relation("scheduleLifting")
  sextonManagement                                   SanitaryPremisesInfoSection[]    @relation("sextonManagement")
  sextonOffice                                       SanitaryPremisesInfoSection[]    @relation("sextonOffice")
  slaughterAreaAvailability                          SanitaryPremisesInfoSection[]    @relation("slaughterAreaAvailability")
  staffChangingRoom                                  SanitaryPremisesInfoSection[]    @relation("staffChangingRoom")
  storeRoomAvailability                              SanitaryPremisesInfoSection[]    @relation("storeRoomAvailability")
  toiletAvailability                                 SanitaryPremisesInfoSection[]    @relation("toiletAvailability")
  urinalAvailability                                 SanitaryPremisesInfoSection[]    @relation("urinalAvailability")
  wheelbathAvailability                              SanitaryPremisesInfoSection[]    @relation("wheelbathAvailability")
  workersOfficeAvailability                          SanitaryPremisesInfoSection[]    @relation("workersOfficeAvailability")
  adequateWasteStorageReceptacle                     SolidWasteSection[]              @relation("adequateWasteStorageReceptacle")
  approvedWasteStorageReceptacle                     SolidWasteSection[]              @relation("approvedWasteStorageReceptacle")
  wastePaymentEvidence                               SolidWasteSection[]              @relation("wastePaymentEvidence")
  wasteServiceProviderRegistration                   SolidWasteSection[]              @relation("wasteServiceProviderRegistration")
  wasteSortingAvailability                           SolidWasteSection[]              @relation("wasteSortingAvailability")
  safeDistanceWaterStorageSanitary                   WaterSection[]                   @relation("safeDistanceWaterStorageSanitary")
  waterStorageConditionSafe                          WaterSection[]                   @relation("waterStorageConditionSafe")
  gtaOperatingLicenceAvailability                    LicencePermitSection[]           @relation("gtaOperatingLicenceAvailability")
  waterAnalysisReport                                LicencePermitSection[]           @relation("waterAnalysisReport")
  regGeneralCertAvailability                         LicencePermitSection[]           @relation("regGeneralCertAvailability")
  suitabilityCertificateAvailability                 LicencePermitSection[]           @relation("suitabilityCertificateAvailability")
  pharmacyCertAvailability                           LicencePermitSection[]           @relation("pharmacyCertAvailability")
  wasteProviderAccreditted                           SolidWasteSection[]              @relation("wasteProviderAccreditted")
  obnoxiousTradeExistFollowUp                        FollowUpInspection[]             @relation("obnoxiousTradeExistFollowUp")
  isNuisanceObserved                                 FollowUpInspection[]             @relation("isNuisanceObserved")
  kitchenAvailabilityInstitution                     InstitutionPremisesInfoSection[] @relation("kitchenAvailability")
  foodVendorAvailability                             InstitutionPremisesInfoSection[] @relation("foodVendorAvailability")
  animalSpaceAvailability                            InstitutionPremisesInfoSection[] @relation("animalSpaceAvailability")

  kitchenAvailabilityEatery EateryPremisesInfoSection[] @relation("kitchenAvailability")

  kitchenAvailabilityHospitality HospitalityPremisesInfoSection[] @relation("kitchenAvailability")
  placentaPitAvailability        HealthPremisesInfoSection[]      @relation("placentaPitAvailability")
  incineratorAvailability        HealthPremisesInfoSection[]      @relation("incineratorAvailability")

  staffChangingRoomIndustry                  IndustryPremisesInfoSection[]    @relation("staffChangingRoom")
  storeRoomAvailabilityIndustry              IndustryPremisesInfoSection[]    @relation("storeRoomAvailability")
  flyScreenNetAvailability                   IndustryPremisesInfoSection[]    @relation("flyScreenNetAvailability")
  protectiveClothingIndustry                 IndustryPremisesInfoSection[]    @relation("protectiveClothingUsed")
  firstAidAvailabilityIndust                 IndustryPremisesInfoSection[]    @relation("firstAidAvailability")
  firstAidAvailabilityInstitution            InstitutionPremisesInfoSection[] @relation("firstAidAvailability")
  uncookedFoodStorageCondtionSafeInstitution InstitutionPremisesInfoSection[] @relation("uncookedFoodStorageCondtionSafe")
  cookedFoodStorageCondtionSafeInstitution   InstitutionPremisesInfoSection[] @relation("cookedFoodStorageCondtionSafe")
  shepClubExistence                          InstitutionPremisesInfoSection[] @relation("shepClubExistence")
  slaughterAreaAvailabilityInstitution       InstitutionPremisesInfoSection[] @relation("slaughterAreaAvailability")
  soundProof                                 InstitutionPremisesInfoSection[] @relation("soundProof")
  ablutionSlab                               InstitutionPremisesInfoSection[] @relation("ablutionSlab")
  firstAidAvailabilityMarket                 MarketPremisesInfoSection[]      @relation("firstAidAvailability")
  designatedSmokingArea                      EateryPremisesInfoSection[]      @relation("designatedSmokingArea")
  protectiveClothingEatery                   EateryPremisesInfoSection[]      @relation("protectiveClothingUsed")
  bodyTraysAdequate                          HealthPremisesInfoSection[]      @relation("bodyTraysAdequate")
  embalmingAreaAvailability                  HealthPremisesInfoSection[]      @relation("embalmingAreaAvailability")
  coldRoomAvailability                       HealthPremisesInfoSection[]      @relation("coldRoomAvailability")
  protectiveClothingUsed                     HospitalityPremisesInfoSection[] @relation("protectiveClothingUsed")
  firstAidAvailabilityHosp                   HospitalityPremisesInfoSection[] @relation("firstAidAvailability")
  boardingHouseAvailability                  InstitutionPremisesInfoSection[] @relation("boardingHouseAvailability")
  boardingHouseOvercrowded                   InstitutionPremisesInfoSection[] @relation("boardingHouseOvercrowded")
  separateBoardingBoysGirls                  InstitutionPremisesInfoSection[] @relation("separateBoardingBoysGirls")

  protectiveClothingUsedInstitution     InstitutionPremisesInfoSection[] @relation("protectiveClothingUsed")
  designatedSmokingAreaHosp             HospitalityPremisesInfoSection[] @relation("designatedSmokingArea")
  cookedFoodStorageCondtionSafeEatery   EateryPremisesInfoSection[]      @relation("cookedFoodStorageCondtionSafe")
  uncookedFoodStorageCondtionSafeEatery EateryPremisesInfoSection[]      @relation("uncookedFoodStorageCondtionSafe")
  disinfectionEatery                    EateryPremisesInfoSection[]      @relation("disinfection")
  disinfestationEatery                  EateryPremisesInfoSection[]      @relation("disinfestation")
  FollowUpInspectionHistory             FollowUpInspectionHistory[]

  obnoxiousTradeExistFollowUpHistory FollowUpInspectionHistory[] @relation("obnoxiousTradeExistFollowUpHistory")
  isNuisanceObservedFollowUpHistory  FollowUpInspectionHistory[] @relation("isNuisanceObservedFollowUpHistory")
}

model InspectionType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  deleted    Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Inspection Inspection[]
}

model Logs {
  id        Int      @id @default(autoincrement())
  userId    Int
  activity  String?  @db.VarChar(255)
  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model BasicInfoSection {
  id                      String                 @id @db.VarChar(255)
  inspectionId            String                 @unique @db.VarChar(255)
  userId                  Int
  communityId             Int?
  community               String?                @db.VarChar(255)
  electoralAreaId         Int?
  electoralArea           String?                @db.VarChar(255)
  ghanaPostGps            String?                @db.VarChar(255)
  latitude                Decimal                @db.Decimal(11, 8)
  longitude               Decimal                @db.Decimal(11, 8)
  accuracy                String?                @db.VarChar(255)
  geom                    Json?
  respondentName          String                 @db.VarChar(255)
  respondentPhoneNumber   String                 @db.VarChar(255)
  respondentDesignationId Int
  deleted                 Int?                   @default(0)
  isCompleted             Int?                   @default(1)
  isSubmitted             Int?                   @default(1)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  Community               Community?             @relation(fields: [communityId], references: [id])
  Inspection              Inspection             @relation(fields: [inspectionId], references: [id])
  RespondentDesignation   RespondentDesignation? @relation(fields: [respondentDesignationId], references: [id])
  User                    User                   @relation(fields: [userId], references: [id])

  // the index for that column
}

model BasicInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                      String   @db.VarChar(255)
  inspectionId            String   @db.VarChar(255)
  userId                  Int
  communityId             Int?
  community               String?  @db.VarChar(255)
  electoralAreaId         Int?
  electoralArea           String?  @db.VarChar(255)
  ghanaPostGps            String?  @db.VarChar(255)
  latitude                Decimal  @db.Decimal(11, 8)
  longitude               Decimal  @db.Decimal(11, 8)
  accuracy                String?  @db.VarChar(255)
  geom                    Json?
  respondentName          String   @db.VarChar(255)
  respondentPhoneNumber   String   @db.VarChar(255)
  respondentDesignationId Int
  deleted                 Int?     @default(0)
  isCompleted             Int?     @default(1)
  isSubmitted             Int?     @default(1)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // User              User              @relation(fields: [userId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model ResidentialPremisesInfoSection {
  id                                        String              @id @db.VarChar(255)
  inspectionId                              String              @unique @db.VarChar(255)
  User                                      User                @relation(fields: [userId], references: [id])
  drainsAvailabilityId                      Int
  toiletAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  approvedHandwashingFacilityAvailabilityId Int?
  animalAvailabilityId                      Int?
  householdNumber                           Int?
  maleOccupantNumber                        Int?
  femaleOccupantNumber                      Int?
  otherAnimal                               String?             @db.VarChar(255)
  animalNumber                              Int?
  animalSpaceConditionId                    Int?
  vaccinationProofId                        Int?
  deleted                                   Int?                @default(0)
  userId                                    Int
  isCompleted                               Int?                @default(1)
  isSubmitted                               Int?                @default(1)
  createdAt                                 DateTime            @default(now())
  updatedAt                                 DateTime            @updatedAt
  PremisesAnimal                            PremisesAnimal[]
  animalAvailability                        YesNo?              @relation("animalAvailability", fields: [animalAvailabilityId], references: [id])
  animalSpaceCondition                      SanitaryInsanitary? @relation("animalSpaceCondition", fields: [animalSpaceConditionId], references: [id])
  approvedHandwashingFacilityAvailability   YesNo?              @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?              @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo               @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability                        YesNo?              @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  vaccinationProof                          YesNo?              @relation("vaccinationProof", fields: [vaccinationProofId], references: [id])
  Inspection                                Inspection          @relation(fields: [inspectionId], references: [id])
}

model ResidentialPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String   @db.VarChar(255)
  inspectionId                              String   @db.VarChar(255)
  // User                                      User    @relation(fields: [userId], references: [id])
  drainsAvailabilityId                      Int
  toiletAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  approvedHandwashingFacilityAvailabilityId Int?
  animalAvailabilityId                      Int?
  householdNumber                           Int?
  maleOccupantNumber                        Int?
  femaleOccupantNumber                      Int?
  otherAnimal                               String?  @db.VarChar(255)
  animalNumber                              Int?
  animalSpaceConditionId                    Int?
  vaccinationProofId                        Int?
  deleted                                   Int?     @default(0)
  userId                                    Int
  isCompleted                               Int?     @default(1)
  isSubmitted                               Int?     @default(1)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model EateryPremisesInfoSection {
  id                                        String                 @id @db.VarChar(255)
  inspectionId                              String                 @unique @db.VarChar(255)
  User                                      User                   @relation(fields: [userId], references: [id])
  facilityName                              String                 @db.VarChar(255)
  physicalStructureTypeId                   Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  eateryPremisesTypeId                      Int?
  eateryPremisesSubTypeId                   Int?
  firstAidAvailabilityId                    Int?
  designatedSmokingAreaId                   Int?
  kitchenAvailabilityId                     Int?
  protectiveClothingUsedId                  Int?
  numberFoodHandling                        Int?
  numberFoodHandlingMedical                 Int?
  uncookedFoodStorageCondtionSafeId         Int?
  cookedFoodStorageCondtionSafeId           Int?
  disinfestationId                          Int?
  disinfestationFrequencyId                 Int?
  disinfectionId                            Int?
  disinfectionFrequencyId                   Int?
  bathroomAvailabilityId                    Int?
  approvedHandwashingFacilityAvailabilityId Int?
  deleted                                   Int?                   @default(0)
  userId                                    Int
  isCompleted                               Int?                   @default(1)
  isSubmitted                               Int?                   @default(1)
  createdAt                                 DateTime               @default(now())
  updatedAt                                 DateTime               @updatedAt
  approvedHandwashingFacilityAvailability   YesNo?                 @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?                 @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo?                 @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  eateryPremisesSubType                     PremisesSubtype?       @relation("eateryPremisesSubType", fields: [eateryPremisesSubTypeId], references: [id])
  eateryPremisesType                        PremisesType?          @relation("eateryPremisesType", fields: [eateryPremisesTypeId], references: [id])
  firstAidAvailability                      YesNo?                 @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  toiletAvailability                        YesNo?                 @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability                        YesNo?                 @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  kitchenAvailability                       YesNo?                 @relation("kitchenAvailability", fields: [kitchenAvailabilityId], references: [id])
  protectiveClothingUsed                    YesNo?                 @relation("protectiveClothingUsed", fields: [protectiveClothingUsedId], references: [id])
  designatedSmokingArea                     YesNo?                 @relation("designatedSmokingArea", fields: [designatedSmokingAreaId], references: [id])
  disinfestationFrequency                   DisinfectionFrequency? @relation("disinfestationFrequency", fields: [disinfestationFrequencyId], references: [id])
  disinfectionFrequency                     DisinfectionFrequency? @relation("disinfectionFrequency", fields: [disinfectionFrequencyId], references: [id])
  uncookedFoodStorageCondtionSafe           YesNo?                 @relation("uncookedFoodStorageCondtionSafe", fields: [uncookedFoodStorageCondtionSafeId], references: [id])
  cookedFoodStorageCondtionSafe             YesNo?                 @relation("cookedFoodStorageCondtionSafe", fields: [cookedFoodStorageCondtionSafeId], references: [id])

  disinfestation YesNo? @relation("disinfestation", fields: [disinfestationId], references: [id])
  disinfection   YesNo? @relation("disinfection", fields: [disinfectionId], references: [id])

  Inspection            Inspection     @relation(fields: [inspectionId], references: [id])
  physicalStructureType StructureType? @relation(fields: [physicalStructureTypeId], references: [id])
}

model EateryPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String   @db.VarChar(255)
  inspectionId                              String   @db.VarChar(255)
  // User                                      User   @relation(fields: [userId], references: [id])
  facilityName                              String   @db.VarChar(255)
  physicalStructureTypeId                   Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  eateryPremisesTypeId                      Int?
  eateryPremisesSubTypeId                   Int?
  firstAidAvailabilityId                    Int?
  designatedSmokingAreaId                   Int?
  kitchenAvailabilityId                     Int?
  protectiveClothingUsedId                  Int?
  numberFoodHandling                        Int?
  numberFoodHandlingMedical                 Int?
  uncookedFoodStorageCondtionSafeId         Int?
  cookedFoodStorageCondtionSafeId           Int?
  disinfestationId                          Int?
  disinfestationFrequencyId                 Int?
  disinfectionId                            Int?
  disinfectionFrequencyId                   Int?
  bathroomAvailabilityId                    Int?
  approvedHandwashingFacilityAvailabilityId Int?
  deleted                                   Int?     @default(0)
  userId                                    Int
  isCompleted                               Int?     @default(1)
  isSubmitted                               Int?     @default(1)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt

  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model HealthPremisesInfoSection {
  id                                        String   @id @db.VarChar(255)
  inspectionId                              String   @unique @db.VarChar(255)
  facilityName                              String   @db.VarChar(255)
  healthPremisesTypeId                      Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  ownershipTypeId                           Int?
  bathroomAvailabilityId                    Int?
  ehoAvailabilityId                         Int?
  numberWards                               Int?
  separateWardId                            Int?
  numberBeds                                Int?
  placentaPitAvailabilityId                 Int?
  incineratorAvailabilityId                 Int?
  approvedHandwashingFacilityAvailabilityId Int?
  deleted                                   Int?     @default(0)
  userId                                    Int
  embalmingAreaConditionId                  Int?
  embalmingAreaAvailabilityId               Int?
  bodyTraysAdequateId                       Int?
  coldRoomAvailabilityId                    Int?
  coldRoomConditionId                       Int?
  isCompleted                               Int?     @default(1)
  isSubmitted                               Int?     @default(1)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt
  approvedHandwashingFacilityAvailability   YesNo?   @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?   @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo?   @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  ehoAvailability                           YesNo?   @relation("ehoAvailability", fields: [ehoAvailabilityId], references: [id])
  incineratorAvailability                   YesNo?   @relation("incineratorAvailability", fields: [incineratorAvailabilityId], references: [id])
  placentaPitAvailability                   YesNo?   @relation("placentaPitAvailability", fields: [placentaPitAvailabilityId], references: [id])

  healthPremisesType PremisesType?  @relation("healthPremisesType", fields: [healthPremisesTypeId], references: [id])
  ownershipType      OwnershipType? @relation(fields: [ownershipTypeId], references: [id])
  separateWard       YesNo?         @relation("separateWard", fields: [separateWardId], references: [id])
  toiletAvailability YesNo?         @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability YesNo?         @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  User               User           @relation(fields: [userId], references: [id])
  Inspection         Inspection     @relation(fields: [inspectionId], references: [id])

  embalmingAreaCondition    SanitaryInsanitary? @relation("embalmingAreaCondition", fields: [embalmingAreaConditionId], references: [id])
  embalmingAreaAvailability YesNo?              @relation("embalmingAreaAvailability", fields: [embalmingAreaAvailabilityId], references: [id])
  bodyTraysAdequate         YesNo?              @relation("bodyTraysAdequate", fields: [bodyTraysAdequateId], references: [id])
  coldRoomAvailability      YesNo?              @relation("coldRoomAvailability", fields: [coldRoomAvailabilityId], references: [id])
  coldRoomCondition         SanitaryInsanitary? @relation("coldRoomCondition", fields: [coldRoomConditionId], references: [id])
}

model HealthPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String            @db.VarChar(255)
  inspectionId                              String            @db.VarChar(255)
  facilityName                              String            @db.VarChar(255)
  healthPremisesTypeId                      Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  ownershipTypeId                           Int?
  bathroomAvailabilityId                    Int?
  ehoAvailabilityId                         Int?
  numberWards                               Int?
  separateWardId                            Int?
  numberBeds                                Int?
  placentaPitAvailabilityId                 Int?
  incineratorAvailabilityId                 Int?
  approvedHandwashingFacilityAvailabilityId Int?
  deleted                                   Int?              @default(0)
  userId                                    Int
  embalmingAreaConditionId                  Int?
  embalmingAreaAvailabilityId               Int?
  bodyTraysAdequateId                       Int?
  coldRoomAvailabilityId                    Int?
  coldRoomConditionId                       Int?
  createdAt                                 DateTime          @default(now())
  updatedAt                                 DateTime          @updatedAt
  isCompleted                               Int?              @default(1)
  isSubmitted                               Int?              @default(1)
  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory                         InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId                                 Int
}

model HospitalityPremisesInfoSection {
  id                                        String         @id @db.VarChar(255)
  inspectionId                              String         @unique @db.VarChar(255)
  facilityName                              String         @db.VarChar(255)
  physicalStructureTypeId                   Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  hospitalityPremisesTypeId                 Int?
  approvedHandwashingFacilityAvailabilityId Int?
  cookedFoodStorageCondtionSafeId           Int?
  uncookedFoodStorageCondtionSafeId         Int?
  designatedSmokingAreaId                   Int?
  protectiveClothingUsedId                  Int?
  firstAidAvailabilityId                    Int?
  bathroomAvailabilityId                    Int?
  kitchenAvailabilityId                     Int?
  numberMaleWorkers                         Int?
  numberFemaleWorkers                       Int?
  numberFoodHandlingMedical                 Int?
  numberFoodHandling                        Int?
  numberRooms                               Int?
  facilityCapacity                          Int?
  deleted                                   Int?           @default(0)
  userId                                    Int
  isCompleted                               Int?           @default(1)
  isSubmitted                               Int?           @default(1)
  createdAt                                 DateTime       @default(now())
  updatedAt                                 DateTime       @updatedAt
  approvedHandwashingFacilityAvailability   YesNo?         @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?         @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo?         @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  hospitalityPremisesType                   PremisesType?  @relation("hospitalityPremisesType", fields: [hospitalityPremisesTypeId], references: [id])
  physicalStructureType                     StructureType? @relation(fields: [physicalStructureTypeId], references: [id])
  toiletAvailability                        YesNo?         @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  uncookedFoodStorageCondtionSafe           YesNo?         @relation("uncookedFoodStorageCondtionSafe", fields: [uncookedFoodStorageCondtionSafeId], references: [id])
  cookedFoodStorageCondtionSafe             YesNo?         @relation("cookedFoodStorageCondtionSafe", fields: [cookedFoodStorageCondtionSafeId], references: [id])

  urinalAvailability     YesNo?     @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  User                   User       @relation(fields: [userId], references: [id])
  Inspection             Inspection @relation(fields: [inspectionId], references: [id])
  kitchenAvailability    YesNo?     @relation("kitchenAvailability", fields: [kitchenAvailabilityId], references: [id])
  protectiveClothingUsed YesNo?     @relation("protectiveClothingUsed", fields: [protectiveClothingUsedId], references: [id])
  firstAidAvailability   YesNo?     @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  designatedSmokingArea  YesNo?     @relation("designatedSmokingArea", fields: [designatedSmokingAreaId], references: [id])
}

model HospitalityPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String            @db.VarChar(255)
  inspectionId                              String            @db.VarChar(255)
  facilityName                              String            @db.VarChar(255)
  physicalStructureTypeId                   Int?
  drainsAvailabilityId                      Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  hospitalityPremisesTypeId                 Int?
  approvedHandwashingFacilityAvailabilityId Int?
  cookedFoodStorageCondtionSafeId           Int?
  uncookedFoodStorageCondtionSafeId         Int?
  designatedSmokingAreaId                   Int?
  protectiveClothingUsedId                  Int?
  firstAidAvailabilityId                    Int?
  bathroomAvailabilityId                    Int?
  kitchenAvailabilityId                     Int?
  numberMaleWorkers                         Int?
  numberFemaleWorkers                       Int?
  numberFoodHandlingMedical                 Int?
  numberFoodHandling                        Int?
  numberRooms                               Int?
  facilityCapacity                          Int?
  deleted                                   Int?              @default(0)
  isCompleted                               Int?              @default(1)
  isSubmitted                               Int?              @default(1)
  userId                                    Int
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  createdAt                                 DateTime          @default(now())
  updatedAt                                 DateTime          @updatedAt
  InspectionHistory                         InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId                                 Int
}

model SanitaryPremisesInfoSection {
  id                                        String @id @db.VarChar(255)
  inspectionId                              String @unique @db.VarChar(255)
  facilityName                              String @db.VarChar(255)
  physicalStructureTypeId                   Int?
  sanitaryPremisesTypeId                    Int?
  sanitaryPremisesSubtypeId                 Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  ownershipTypeId                           Int?
  storeRoomAvailabilityId                   Int?
  staffChangingRoomId                       Int?
  sanitaryFacilityMgtId                     Int?
  disinfectionFrequencyId                   Int?
  disinfestationQuarterlyId                 Int?
  protectiveClothingUsedId                  Int?
  slaughterAreaAvailabilityId               Int?
  condemnationRoomAvailabilityId            Int?
  cloakRoomAvailabilityId                   Int?
  comfortRoomAvailabilityId                 Int?
  wheelbathAvailabilityId                   Int?
  footbathAvailabilityId                    Int?
  leachateMgtId                             Int?
  safeHazardousWasteMgtId                   Int?
  sextonManagementId                        Int?
  sextonOfficeId                            Int?
  properLayoutId                            Int?
  siteFencedId                              Int?
  cremationPracticedId                      Int?
  workersOfficeAvailabilityId               Int?
  transferStationCapacity                   Int?
  numberContainer                           Int?
  containerAttendantName                    Int?
  containerAttendantPhoneNumber             Int?

  numberWorkers                           Int?
  cremationPlatformId                     Int?
  sanitaryAshesDisposalId                 Int?
  deleted                                 Int?                   @default(0)
  userId                                  Int
  isCompleted                             Int?                   @default(1)
  isSubmitted                             Int?                   @default(1)
  numberCarcassHandlers                   Int?
  numberCarcassHandlersMedicalCert        Int?
  createdAt                               DateTime               @default(now())
  updatedAt                               DateTime               @updatedAt
  approvedHandwashingFacilityAvailability YesNo?                 @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                    YesNo?                 @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  cloakRoomAvailability                   YesNo?                 @relation("cloakRoomAvailability", fields: [cloakRoomAvailabilityId], references: [id])
  comfortRoomAvailability                 YesNo?                 @relation("comfortRoomAvailability", fields: [comfortRoomAvailabilityId], references: [id])
  condemnationRoomAvailability            YesNo?                 @relation("condemnationRoomAvailability", fields: [condemnationRoomAvailabilityId], references: [id])
  cremationPlatform                       YesNo?                 @relation("cremationPlatform", fields: [cremationPlatformId], references: [id])
  cremationPracticed                      YesNo?                 @relation("cremationPracticed", fields: [cremationPracticedId], references: [id])
  disinfectionFrequency                   DisinfectionFrequency? @relation("disinfectionFrequency", fields: [disinfectionFrequencyId], references: [id])
  disinfestationQuarterly                 YesNo?                 @relation("disinfestationQuarterly", fields: [disinfestationQuarterlyId], references: [id])
  drainsAvailability                      YesNo?                 @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  siteFenced                              YesNo?                 @relation("siteFenced", fields: [siteFencedId], references: [id])
  firstAidAvailability                    YesNo?                 @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  footbathAvailability                    YesNo?                 @relation("footbathAvailability", fields: [footbathAvailabilityId], references: [id])
  leachateMgt                             YesNo?                 @relation("leachateMgt", fields: [leachateMgtId], references: [id])
  ownershipType                           OwnershipType?         @relation("ownershipTypeSanitary", fields: [ownershipTypeId], references: [id])
  physicalStructureType                   StructureType?         @relation(fields: [physicalStructureTypeId], references: [id])
  properLayout                            YesNo?                 @relation("properLayout", fields: [properLayoutId], references: [id])
  protectiveClothing                      YesNo?                 @relation("protectiveClothing", fields: [protectiveClothingUsedId], references: [id])
  safeHazardousWasteMgt                   YesNo?                 @relation("safeHazardousWasteMgt", fields: [safeHazardousWasteMgtId], references: [id])
  sanitaryAshesDisposal                   SanitaryInsanitary?    @relation("sanitaryAshesDisposal", fields: [sanitaryAshesDisposalId], references: [id])
  sanitaryFacilityMgt                     YesNo?                 @relation("sanitaryFacilityMgt", fields: [sanitaryFacilityMgtId], references: [id])
  sanitaryPremisesType                    PremisesType?          @relation("sanitaryPremisesType", fields: [sanitaryPremisesTypeId], references: [id])
  sextonManagement                        YesNo?                 @relation("sextonManagement", fields: [sextonManagementId], references: [id])
  sextonOffice                            YesNo?                 @relation("sextonOffice", fields: [sextonOfficeId], references: [id])
  slaughterAreaAvailability               YesNo?                 @relation("slaughterAreaAvailability", fields: [slaughterAreaAvailabilityId], references: [id])
  staffChangingRoom                       YesNo?                 @relation("staffChangingRoom", fields: [staffChangingRoomId], references: [id])
  storeRoomAvailability                   YesNo?                 @relation("storeRoomAvailability", fields: [storeRoomAvailabilityId], references: [id])
  toiletAvailability                      YesNo?                 @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability                      YesNo?                 @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  wheelbathAvailability                   YesNo?                 @relation("wheelbathAvailability", fields: [wheelbathAvailabilityId], references: [id])
  workersOfficeAvailability               YesNo?                 @relation("workersOfficeAvailability", fields: [workersOfficeAvailabilityId], references: [id])
  User                                    User                   @relation(fields: [userId], references: [id])
  Inspection                              Inspection             @relation(fields: [inspectionId], references: [id])
}

model SanitaryPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String @db.VarChar(255)
  inspectionId                              String @db.VarChar(255)
  facilityName                              String @db.VarChar(255)
  physicalStructureTypeId                   Int?
  sanitaryPremisesTypeId                    Int?
  sanitaryPremisesSubtypeId                 Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  ownershipTypeId                           Int?
  storeRoomAvailabilityId                   Int?
  staffChangingRoomId                       Int?
  sanitaryFacilityMgtId                     Int?
  disinfectionFrequencyId                   Int?
  disinfestationQuarterlyId                 Int?
  protectiveClothingUsedId                  Int?
  slaughterAreaAvailabilityId               Int?
  condemnationRoomAvailabilityId            Int?
  cloakRoomAvailabilityId                   Int?
  comfortRoomAvailabilityId                 Int?
  wheelbathAvailabilityId                   Int?
  footbathAvailabilityId                    Int?
  leachateMgtId                             Int?
  safeHazardousWasteMgtId                   Int?
  sextonManagementId                        Int?
  sextonOfficeId                            Int?
  properLayoutId                            Int?
  siteFencedId                              Int?
  cremationPracticedId                      Int?
  workersOfficeAvailabilityId               Int?
  transferStationCapacity                   Int?
  numberContainer                           Int?
  containerAttendantName                    Int?
  containerAttendantPhoneNumber             Int?
  isCompleted                               Int?   @default(1)
  isSubmitted                               Int?   @default(1)
  numberWorkers                             Int?
  cremationPlatformId                       Int?
  sanitaryAshesDisposalId                   Int?
  deleted                                   Int?   @default(0)
  userId                                    Int

  numberCarcassHandlers            Int?
  numberCarcassHandlersMedicalCert Int?
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model MarketPremisesInfoSection {
  id                                        String              @id @db.VarChar(255)
  inspectionId                              String              @unique @db.VarChar(255)
  facilityName                              String              @db.VarChar(255)
  marketPremisesTypeId                      Int?
  physicalStructureTypeId                   Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  ownershipTypeId                           Int?
  numberStores                              Int?
  numberSheds                               Int?
  numberStalls                              Int?
  numberTraders                             Int?
  numberMeatShops                           Int?
  numberColdStores                          Int?
  numberMills                               Int?
  numberChopbars                            Int?
  generalSanitaryConditionId                Int?
  derattingFrequencyId                      Int?
  cleanupFrequencyId                        Int?
  numberLorrySheds                          Int?
  numberVehicles                            Int?
  numberDrivers                             Int?
  numberFoodVendors                         Int?
  deleted                                   Int?                @default(0)
  userId                                    Int
  isCompleted                               Int?                @default(1)
  isSubmitted                               Int?                @default(1)
  createdAt                                 DateTime            @default(now())
  updatedAt                                 DateTime            @updatedAt
  approvedHandwashingFacilityAvailability   YesNo?              @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?              @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo?              @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability                        YesNo?              @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability                        YesNo?              @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  firstAidAvailability                      YesNo?              @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  generalSanitaryCondition                  SanitaryInsanitary? @relation("generalSanitaryCondition", fields: [generalSanitaryConditionId], references: [id])

  marketPremisesType PremisesType? @relation(fields: [marketPremisesTypeId], references: [id])

  User                  User                @relation(fields: [userId], references: [id])
  Inspection            Inspection          @relation(fields: [inspectionId], references: [id])
  physicalStructureType StructureType?      @relation(fields: [physicalStructureTypeId], references: [id])
  cleanupFrequency      CleaningFrequency?  @relation(fields: [cleanupFrequencyId], references: [id])
  derattingFrequency    DerattingFrequency? @relation(fields: [derattingFrequencyId], references: [id])
  ownershipType         OwnershipType?      @relation(fields: [ownershipTypeId], references: [id])
}

model MarketPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String   @db.VarChar(255)
  inspectionId                              String   @db.VarChar(255)
  facilityName                              String   @db.VarChar(255)
  marketPremisesTypeId                      Int?
  physicalStructureTypeId                   Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  ownershipTypeId                           Int?
  numberStores                              Int?
  numberSheds                               Int?
  numberStalls                              Int?
  numberTraders                             Int?
  numberMeatShops                           Int?
  numberColdStores                          Int?
  numberMills                               Int?
  numberChopbars                            Int?
  generalSanitaryConditionId                Int?
  derattingFrequencyId                      Int?
  cleanupFrequencyId                        Int?
  numberLorrySheds                          Int?
  numberVehicles                            Int?
  numberDrivers                             Int?
  numberFoodVendors                         Int?
  deleted                                   Int?     @default(0)
  userId                                    Int
  isCompleted                               Int?     @default(1)
  isSubmitted                               Int?     @default(1)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model InstitutionPremisesInfoSection {
  id                                        String              @id @db.VarChar(255)
  inspectionId                              String              @unique @db.VarChar(255)
  facilityName                              String              @db.VarChar(255)
  institutionPremisesTypeId                 Int?
  institutionPremisesSubtypeId              Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  numberTeachingStaff                       Int?
  numberNonTeachingStaff                    Int?
  numberMaleStudents                        Int?
  numberFemaleStudents                      Int?
  kitchenAvailabilityId                     Int?
  uncookedFoodStorageCondtionSafeId         Int?
  cookedFoodStorageCondtionSafeId           Int?
  kitchenConditionId                        Int?
  protectiveClothingUsedId                  Int?
  numberFoodHandling                        Int?
  numberFoodHandlingMedicalId               Int?
  numberClassRoomsId                        Int?
  shepClubExistenceId                       Int?
  numberOtherRooms                          Int?
  animalSpaceConditionId                    Int?
  animalSpaceAvailabilityId                 Int?
  premisesConditionId                       Int?
  slaughterAreaAvailabilityId               Int?
  slaughterAreaConditionId                  Int?
  soundProofId                              Int?
  ablutionSlabId                            Int?
  ablutionSlabConditionId                   Int?
  facilityCapacity                          Int?
  multipleExitId                            Int?
  disabilityFriendlyId                      Int?
  emergencyExitId                           Int?
  emergencyAssemblyPointId                  Int?
  overcrowdingId                            Int?
  adequateLighteningId                      Int?
  adequateVentilationId                     Int?
  numberCompoundFoodVendor                  Int?
  numberFoodVendorMedicallyCertified        Int?
  fireExtinguisherId                        Int?
  numberFireExtinguisher                    Int?
  buildingStructureConditionId              Int?
  physicalStructureTypeId                   Int?
  foodVendorAvailabilityId                  Int?
  boardingHouseAvailabilityId               Int?
  boardingHouseOvercrowdedId                Int?
  separateBoardingBoysGirlsId               Int?
  boardingHouseConditionId                  Int?
  deleted                                   Int?                @default(0)
  userId                                    Int
  isCompleted                               Int?                @default(1)
  isSubmitted                               Int?                @default(1)
  createdAt                                 DateTime            @default(now())
  updatedAt                                 DateTime            @updatedAt
  approvedHandwashingFacilityAvailability   YesNo?              @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                      YesNo?              @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                        YesNo?              @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability                        YesNo?              @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability                        YesNo?              @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  foodVendorAvailability                    YesNo?              @relation("foodVendorAvailability", fields: [foodVendorAvailabilityId], references: [id])
  kitchenAvailability                       YesNo?              @relation("kitchenAvailability", fields: [kitchenAvailabilityId], references: [id])
  animalSpaceAvailability                   YesNo?              @relation("animalSpaceAvailability", fields: [animalSpaceAvailabilityId], references: [id])
  animalSpaceCondition                      SanitaryInsanitary? @relation("animalSpaceCondition", fields: [animalSpaceConditionId], references: [id])
  firstAidAvailability                      YesNo?              @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])
  uncookedFoodStorageCondtionSafe           YesNo?              @relation("uncookedFoodStorageCondtionSafe", fields: [uncookedFoodStorageCondtionSafeId], references: [id])
  cookedFoodStorageCondtionSafe             YesNo?              @relation("cookedFoodStorageCondtionSafe", fields: [cookedFoodStorageCondtionSafeId], references: [id])
  shepClubExistence                         YesNo?              @relation("shepClubExistence", fields: [shepClubExistenceId], references: [id])
  slaughterAreaAvailability                 YesNo?              @relation("slaughterAreaAvailability", fields: [slaughterAreaAvailabilityId], references: [id])
  slaughterAreaCondition                    SanitaryInsanitary? @relation("slaughterAreaCondition", fields: [slaughterAreaConditionId], references: [id])
  soundProof                                YesNo?              @relation("soundProof", fields: [soundProofId], references: [id])
  ablutionSlab                              YesNo?              @relation("ablutionSlab", fields: [ablutionSlabId], references: [id])
  ablutionSlabCondition                     SanitaryInsanitary? @relation("ablutionSlabCondition", fields: [ablutionSlabConditionId], references: [id])
  physicalStructureType                     StructureType?      @relation(fields: [physicalStructureTypeId], references: [id])

  boardingHouseAvailability YesNo?              @relation("boardingHouseAvailability", fields: [boardingHouseAvailabilityId], references: [id])
  boardingHouseOvercrowded  YesNo?              @relation("boardingHouseOvercrowded", fields: [boardingHouseOvercrowdedId], references: [id])
  separateBoardingBoysGirls YesNo?              @relation("separateBoardingBoysGirls", fields: [separateBoardingBoysGirlsId], references: [id])
  boardingHouseCondition    SanitaryInsanitary? @relation("boardingHouseCondition", fields: [boardingHouseConditionId], references: [id])

  protectiveClothingUsed YesNo? @relation("protectiveClothingUsed", fields: [protectiveClothingUsedId], references: [id])

  User       User       @relation(fields: [userId], references: [id])
  Inspection Inspection @relation(fields: [inspectionId], references: [id])

  PremisesType    PremisesType?    @relation(fields: [institutionPremisesTypeId], references: [id])
  PremisesSubtype PremisesSubtype? @relation(fields: [institutionPremisesSubtypeId], references: [id])
}

model InstitutionPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String   @db.VarChar(255)
  inspectionId                              String   @db.VarChar(255)
  facilityName                              String   @db.VarChar(255)
  institutionPremisesTypeId                 Int?
  institutionPremisesSubtypeId              Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  numberTeachingStaff                       Int?
  numberNonTeachingStaff                    Int?
  numberMaleStudents                        Int?
  numberFemaleStudents                      Int?
  kitchenAvailabilityId                     Int?
  uncookedFoodStorageCondtionSafeId         Int?
  cookedFoodStorageCondtionSafeId           Int?
  kitchenConditionId                        Int?
  protectiveClothingUsedId                  Int?
  numberFoodHandling                        Int?
  numberFoodHandlingMedicalId               Int?
  numberClassRoomsId                        Int?
  shepClubExistenceId                       Int?
  numberOtherRooms                          Int?
  animalSpaceConditionId                    Int?
  animalSpaceAvailabilityId                 Int?
  premisesConditionId                       Int?
  slaughterAreaAvailabilityId               Int?
  slaughterAreaConditionId                  Int?
  soundProofId                              Int?
  ablutionSlabId                            Int?
  ablutionSlabConditionId                   Int?
  facilityCapacity                          Int?
  multipleExitId                            Int?
  disabilityFriendlyId                      Int?
  emergencyExitId                           Int?
  emergencyAssemblyPointId                  Int?
  overcrowdingId                            Int?
  adequateLighteningId                      Int?
  adequateVentilationId                     Int?
  numberCompoundFoodVendor                  Int?
  numberFoodVendorMedicallyCertified        Int?
  fireExtinguisherId                        Int?
  numberFireExtinguisher                    Int?
  buildingStructureConditionId              Int?
  physicalStructureTypeId                   Int?
  foodVendorAvailabilityId                  Int?
  boardingHouseAvailabilityId               Int?
  boardingHouseOvercrowdedId                Int?
  separateBoardingBoysGirlsId               Int?
  boardingHouseConditionId                  Int?
  deleted                                   Int?     @default(0)
  userId                                    Int
  isCompleted                               Int?     @default(1)
  isSubmitted                               Int?     @default(1)
  createdAt                                 DateTime @default(now())
  updatedAt                                 DateTime @updatedAt

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model IndustryPremisesInfoSection {
  id                                        String  @id @db.VarChar(255)
  inspectionId                              String  @unique @db.VarChar(255)
  facilityName                              String  @db.VarChar(255)
  industryPremisesTypeId                    Int?
  industryPremisesSubtypeId                 Int?
  physicalStructureTypeId                   Int?
  otherIndustryFacility                     String? @db.VarChar(255)
  protectiveClothingUsedId                  Int?
  productionRoomConditionId                 Int?
  flyScreenNetAvailabilityId                Int?
  storeRoomAvailabilityId                   Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  staffChangingRoomId                       Int?
  manufacturedServices                      String  @db.VarChar(255)
  majorByProducts                           String  @db.VarChar(255)
  numberWorkers                             Int?
  numberFoodHandlers                        Int?
  numberFoodHandlersCert                    Int?
  userId                                    Int
  isCompleted                               Int?    @default(1)
  isSubmitted                               Int?    @default(1)
  byProductsStorageAreaCondId               Int?
  deleted                                   Int?    @default(0)

  createdAt                               DateTime            @default(now())
  updatedAt                               DateTime            @updatedAt
  approvedHandwashingFacilityAvailability YesNo?              @relation("approvedHandwashingFacilityAvailability", fields: [approvedHandwashingFacilityAvailabilityId], references: [id])
  bathroomAvailability                    YesNo?              @relation("bathroomAvailability", fields: [bathroomAvailabilityId], references: [id])
  drainsAvailability                      YesNo?              @relation("drainsAvailability", fields: [drainsAvailabilityId], references: [id])
  toiletAvailability                      YesNo?              @relation("toiletAvailability", fields: [toiletAvailabilityId], references: [id])
  urinalAvailability                      YesNo?              @relation("urinalAvailability", fields: [urinalAvailabilityId], references: [id])
  User                                    User                @relation(fields: [userId], references: [id])
  Inspection                              Inspection          @relation(fields: [inspectionId], references: [id])
  physicalStructureType                   StructureType?      @relation(fields: [physicalStructureTypeId], references: [id])
  byProductsStorageAreaCond               SanitaryInsanitary? @relation("byProductsStorageAreaCond", fields: [byProductsStorageAreaCondId], references: [id])
  productionRoomCondition                 SanitaryInsanitary? @relation("productionRoomCondition", fields: [productionRoomConditionId], references: [id])
  staffChangingRoom                       YesNo?              @relation("staffChangingRoom", fields: [staffChangingRoomId], references: [id])
  storeRoomAvailability                   YesNo?              @relation("storeRoomAvailability", fields: [storeRoomAvailabilityId], references: [id])
  flyScreenNetAvailability                YesNo?              @relation("flyScreenNetAvailability", fields: [flyScreenNetAvailabilityId], references: [id])
  firstAidAvailability                    YesNo?              @relation("firstAidAvailability", fields: [firstAidAvailabilityId], references: [id])

  protectiveClothingUsed YesNo? @relation("protectiveClothingUsed", fields: [protectiveClothingUsedId], references: [id])

  PremisesType    PremisesType?    @relation(fields: [industryPremisesTypeId], references: [id])
  PremisesSubtype PremisesSubtype? @relation(fields: [industryPremisesSubtypeId], references: [id])
}

model IndustryPremisesInfoSectionHistory {
  newId Int @id @default(autoincrement())

  id                                        String  @db.VarChar(255)
  inspectionId                              String  @db.VarChar(255)
  facilityName                              String  @db.VarChar(255)
  industryPremisesTypeId                    Int?
  industryPremisesSubtypeId                 Int?
  physicalStructureTypeId                   Int?
  otherIndustryFacility                     String? @db.VarChar(255)
  protectiveClothingUsedId                  Int?
  productionRoomConditionId                 Int?
  flyScreenNetAvailabilityId                Int?
  storeRoomAvailabilityId                   Int?
  toiletAvailabilityId                      Int?
  urinalAvailabilityId                      Int?
  bathroomAvailabilityId                    Int?
  drainsAvailabilityId                      Int?
  approvedHandwashingFacilityAvailabilityId Int?
  firstAidAvailabilityId                    Int?
  staffChangingRoomId                       Int?
  manufacturedServices                      String  @db.VarChar(255)
  majorByProducts                           String  @db.VarChar(255)
  numberWorkers                             Int?
  numberFoodHandlers                        Int?
  numberFoodHandlersCert                    Int?
  userId                                    Int

  byProductsStorageAreaCondId Int?
  deleted                     Int?     @default(0)
  isCompleted                 Int?     @default(1)
  isSubmitted                 Int?     @default(1)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model LicencePermitSection {
  id                                   String   @id @db.VarChar(255)
  inspectionId                         String   @unique @db.VarChar(255)
  userId                               Int
  buildingPermitAvailabilityId         Int?
  businessLicenceAvailabilityId        Int?
  operatingLicenceAvailabilityId       Int?
  propertyRateAvailabilityId           Int?
  structurePermitAvailabilityId        Int?
  habitationCertificateAvailabilityId  Int?
  fumigationCertificateAvailabilityId  Int?
  medicalCertificateAvailabilityId     Int?
  gtaOperatingLicenceAvailabilityId    Int?
  animalsPermitAvailabilityId          Int?
  suitabilityCertificateAvailabilityId Int?
  waterAnalysisReportId                Int?
  regGeneralCertAvailabilityId         Int?
  pharmacyCertAvailabilityId           Int?
  isCompleted                          Int?     @default(1)
  isSubmitted                          Int?     @default(1)
  deleted                              Int?     @default(0)
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime @updatedAt
  animalsPermitAvailability            YesNo?   @relation("animalsPermitAvailability", fields: [animalsPermitAvailabilityId], references: [id])
  buildingPermitAvailability           YesNo?   @relation("buildingPermitAvailability", fields: [buildingPermitAvailabilityId], references: [id])
  businessLicenceAvailability          YesNo?   @relation("businessLicenceAvailability", fields: [businessLicenceAvailabilityId], references: [id])
  fumigationCertificateAvailability    YesNo?   @relation("fumigationCertificateAvailability", fields: [fumigationCertificateAvailabilityId], references: [id])
  habitationCertificateAvailability    YesNo?   @relation("habitationCertificateAvailability", fields: [habitationCertificateAvailabilityId], references: [id])
  operatingLicenceAvailability         YesNo?   @relation("operatingLicenceAvailability", fields: [operatingLicenceAvailabilityId], references: [id])
  propertyRateAvailability             YesNo?   @relation("propertyRateAvailability", fields: [propertyRateAvailabilityId], references: [id])
  structurePermitAvailability          YesNo?   @relation("structurePermitAvailability", fields: [structurePermitAvailabilityId], references: [id])

  gtaOperatingLicenceAvailability    YesNo? @relation("gtaOperatingLicenceAvailability", fields: [gtaOperatingLicenceAvailabilityId], references: [id])
  waterAnalysisReport                YesNo? @relation("waterAnalysisReport", fields: [waterAnalysisReportId], references: [id])
  regGeneralCertAvailability         YesNo? @relation("regGeneralCertAvailability", fields: [regGeneralCertAvailabilityId], references: [id])
  suitabilityCertificateAvailability YesNo? @relation("suitabilityCertificateAvailability", fields: [suitabilityCertificateAvailabilityId], references: [id])
  pharmacyCertAvailability           YesNo? @relation("pharmacyCertAvailability", fields: [pharmacyCertAvailabilityId], references: [id])

  User       User       @relation(fields: [userId], references: [id])
  Inspection Inspection @relation(fields: [inspectionId], references: [id])
}

model LicencePermitSectionHistory {
  newId Int @id @default(autoincrement())

  id                                   String            @db.VarChar(255)
  inspectionId                         String            @db.VarChar(255)
  userId                               Int
  buildingPermitAvailabilityId         Int?
  businessLicenceAvailabilityId        Int?
  operatingLicenceAvailabilityId       Int?
  propertyRateAvailabilityId           Int?
  structurePermitAvailabilityId        Int?
  habitationCertificateAvailabilityId  Int?
  fumigationCertificateAvailabilityId  Int?
  medicalCertificateAvailabilityId     Int?
  gtaOperatingLicenceAvailabilityId    Int?
  animalsPermitAvailabilityId          Int?
  suitabilityCertificateAvailabilityId Int?
  waterAnalysisReportId                Int?
  regGeneralCertAvailabilityId         Int?
  pharmacyCertAvailabilityId           Int?
  isCompleted                          Int?              @default(1)
  isSubmitted                          Int?              @default(1)
  deleted                              Int?              @default(0)
  createdAt                            DateTime          @default(now())
  updatedAt                            DateTime          @updatedAt
  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory                    InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId                            Int
}

model WaterSection {
  id                                 String @id @db.VarChar(255)
  inspectionId                       String @unique @db.VarChar(255)
  userId                             Int
  waterSourceConditionId             Int?
  waterStorageConditionId            Int?
  waterFlowFrequencyId               Int?
  safeDistanceWaterStorageSanitaryId Int?

  rating                           Int?
  isCompleted                      Int?                           @default(1)
  isSubmitted                      Int?                           @default(1)
  deleted                          Int?                           @default(0)
  createdAt                        DateTime                       @default(now())
  updatedAt                        DateTime                       @updatedAt
  PremisesDrinkingWaterSources     PremisesDrinkingWaterSources[]
  PremisesWaterSources             PremisesWaterSources[]
  PremisesWaterStorage             PremisesWaterStorage[]
  PremisesWaterSupply              PremisesWaterSupply[]
  PremisesWaterTreatmentType       PremisesWaterTreatmentType[]
  Inspection                       Inspection                     @relation(fields: [inspectionId], references: [id])
  safeDistanceWaterStorageSanitary YesNo?                         @relation("safeDistanceWaterStorageSanitary", fields: [safeDistanceWaterStorageSanitaryId], references: [id])
  User                             User                           @relation(fields: [userId], references: [id])
  WaterFlowFrequency               WaterFlowFrequency?            @relation(fields: [waterFlowFrequencyId], references: [id])
  waterSourceCondition             SafeUnsafe?                    @relation(fields: [waterSourceConditionId], references: [id])
  waterStorageConditionSafe        YesNo?                         @relation("waterStorageConditionSafe", fields: [waterStorageConditionId], references: [id])
  PremisesUnsafeWaterStorage       PremisesUnsafeWaterStorage[]
}

model WaterSectionHistory {
  newId Int @id @default(autoincrement())

  id                                 String @db.VarChar(255)
  inspectionId                       String @db.VarChar(255)
  userId                             Int
  waterSourceConditionId             Int?
  waterStorageConditionId            Int?
  waterFlowFrequencyId               Int?
  safeDistanceWaterStorageSanitaryId Int?

  rating Int?

  deleted     Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isCompleted Int?     @default(1)
  isSubmitted Int?     @default(1)

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model LiquidWasteSection {
  id                         String @id @db.VarChar(255)
  inspectionId               String @unique @db.VarChar(255)
  userId                     Int
  numberToiletSeats          Int?
  numberUrinalSeats          Int?
  toiletAdequacyId           Int?
  urinalAdequacyId           Int?
  bathroomAdequacyId         Int?
  separateStaffUrinalId      Int?
  availToiletFaciltyMgtId    Int?
  toiletGenderSensivityId    Int?
  urinalGenderSensivityId    Int?
  toiletPitPositionId        Int?
  toiletDisabilityFriendlyId Int?
  urinalDisabilityFriendlyId Int?
  stagnationEvidenceId       Int?
  drainsConditionId          Int?
  analCleansingMaterialMgtId Int?
  effluentManagementReportId Int?
  bathroomConditionId        Int?
  areaSeweredId              Int?
  facilityConnectedSewerId   Int?
  numberUrinalCubicle        Int?
  numberBathroomCubicle      Int?

  urinalCubicleConditionId      Int?
  toiletConditionId             Int?
  toiletDischargeId             Int?
  containmentEmptiedId          Int?
  sewerSystemId                 Int?
  wasteWaterContainmentId       Int?
  easeYourselfWhereId           Int?
  desiltingFrequencyId          Int?
  rating                        Int?
  toiletHouseholdNumberId       Int?
  isCompleted                   Int?                            @default(1)
  isSubmitted                   Int?                            @default(1)
  deleted                       Int?                            @default(0)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  drainTypeId                   Int?
  effluentManagementId          Int?
  excretaContainmentId          Int?
  excretaDisposalMethodId       Int?
  analCleansingMaterialMgt      YesNo?                          @relation("analCleansingMaterialMgt", fields: [analCleansingMaterialMgtId], references: [id])
  areaSewered                   YesNo?                          @relation("areaSewered", fields: [areaSeweredId], references: [id])
  availToiletFaciltyMgt         YesNo?                          @relation("availToiletFaciltyMgt", fields: [availToiletFaciltyMgtId], references: [id])
  bathroomAdequacy              YesNo?                          @relation("bathroomAdequacy", fields: [bathroomAdequacyId], references: [id])
  containmentEmptied            YesNo?                          @relation("containmentEmptied", fields: [containmentEmptiedId], references: [id])
  DesiltingFrequency            DesiltingFrequency?             @relation(fields: [desiltingFrequencyId], references: [id])
  DrainType                     DrainType?                      @relation(fields: [drainTypeId], references: [id])
  drainsCondition               YesNo?                          @relation("drainsCondition", fields: [drainsConditionId], references: [id])
  EaseYourselfWhere             EaseYourselfWhere?              @relation(fields: [easeYourselfWhereId], references: [id])
  EffluentManagement            EffluentManagement?             @relation(fields: [effluentManagementId], references: [id])
  effluentManagementReport      YesNo?                          @relation("effluentManagementReport", fields: [effluentManagementReportId], references: [id])
  ExcretaContainment            ExcretaContainment?             @relation(fields: [excretaContainmentId], references: [id])
  ExcretaDisposalMethod         ExcretaDisposalMethod?          @relation(fields: [excretaDisposalMethodId], references: [id])
  facilityConnectedSewer        YesNo?                          @relation("facilityConnectedSewer", fields: [facilityConnectedSewerId], references: [id])
  Inspection                    Inspection                      @relation(fields: [inspectionId], references: [id])
  bathroomCondition             SanitaryInsanitary?             @relation("bathroomCondition", fields: [bathroomConditionId], references: [id])
  separateStaffUrinal           YesNo?                          @relation("separateStaffUrinal", fields: [separateStaffUrinalId], references: [id])
  sewerSystem                   YesNo?                          @relation("sewerSystem", fields: [sewerSystemId], references: [id])
  stagnationEvidence            YesNo?                          @relation("stagnationEvidence", fields: [stagnationEvidenceId], references: [id])
  toiletAdequacy                YesNo?                          @relation("toiletAdequacy", fields: [toiletAdequacyId], references: [id])
  toiletCondition               SanitaryInsanitary?             @relation("toiletCondition", fields: [toiletConditionId], references: [id])
  toiletDisabilityFriendly      YesNo?                          @relation("toiletDisabilityFriendly", fields: [toiletDisabilityFriendlyId], references: [id])
  toiletDischarge               YesNo?                          @relation("toiletDischarge", fields: [toiletDischargeId], references: [id])
  toiletGenderSensivity         YesNo?                          @relation("toiletGenderSensivity", fields: [toiletGenderSensivityId], references: [id])
  toiletPitPosition             YesNo?                          @relation("toiletPitPosition", fields: [toiletPitPositionId], references: [id])
  urinalAdequacy                YesNo?                          @relation("urinalAdequacy", fields: [urinalAdequacyId], references: [id])
  urinalCubicleCondition        SanitaryInsanitary?             @relation("urinalCubicleCondition", fields: [urinalCubicleConditionId], references: [id])
  urinalDisabilityFriendly      YesNo?                          @relation("urinalDisabilityFriendly", fields: [urinalDisabilityFriendlyId], references: [id])
  urinalGenderSensivity         YesNo?                          @relation("urinalGenderSensivity", fields: [urinalGenderSensivityId], references: [id])
  User                          User                            @relation(fields: [userId], references: [id])
  wasteWaterContainment         YesNo?                          @relation("wasteWaterContainment", fields: [wasteWaterContainmentId], references: [id])
  PremisesDrainType             PremisesDrainType[]
  PremisesEffluentManagement    PremisesEffluentManagement[]
  PremisesExcretaContainment    PremisesExcretaContainment[]
  PremisesExcretaDisposalMethod PremisesExcretaDisposalMethod[]
  PremisesGreyWaterDisposal     PremisesGreyWaterDisposal[]
  PremisesToiletType            PremisesToiletType[]
  ToiletHouseholdNumber         ToiletHouseholdNumber?          @relation(fields: [toiletHouseholdNumberId], references: [id])
  PremisesDrainBadCondition     PremisesDrainBadCondition[]
}

model LiquidWasteSectionHistory {
  newId Int @id @default(autoincrement())

  id                         String @db.VarChar(255)
  inspectionId               String @db.VarChar(255)
  userId                     Int
  numberToiletSeats          Int?
  numberUrinalSeats          Int?
  toiletAdequacyId           Int?
  urinalAdequacyId           Int?
  bathroomAdequacyId         Int?
  separateStaffUrinalId      Int?
  availToiletFaciltyMgtId    Int?
  toiletGenderSensivityId    Int?
  urinalGenderSensivityId    Int?
  toiletPitPositionId        Int?
  toiletDisabilityFriendlyId Int?
  urinalDisabilityFriendlyId Int?
  stagnationEvidenceId       Int?
  drainsConditionId          Int?
  analCleansingMaterialMgtId Int?
  effluentManagementReportId Int?
  bathroomConditionId        Int?
  areaSeweredId              Int?
  facilityConnectedSewerId   Int?
  numberUrinalCubicle        Int?
  numberBathroomCubicle      Int?

  urinalCubicleConditionId Int?
  toiletConditionId        Int?
  toiletDischargeId        Int?
  containmentEmptiedId     Int?
  sewerSystemId            Int?
  wasteWaterContainmentId  Int?
  easeYourselfWhereId      Int?
  desiltingFrequencyId     Int?
  rating                   Int?
  toiletHouseholdNumberId  Int?

  deleted                 Int?              @default(0)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  drainTypeId             Int?
  effluentManagementId    Int?
  excretaContainmentId    Int?
  excretaDisposalMethodId Int?
  isCompleted             Int?              @default(1)
  isSubmitted             Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory       InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId               Int
}

model SolidWasteSection {
  id                                 String                           @id @db.VarChar(255)
  inspectionId                       String                           @unique @db.VarChar(255)
  userId                             Int
  wasteServiceProviderRegistrationId Int?
  wasteCollectorName                 String?
  wasteSortingAvailabilityId         Int?
  wasteCollectionFrequencyId         Int?
  approvedWasteStorageReceptacleId   Int?
  adequateWasteStorageReceptacleId   Int?
  wasteCollectionTypeId              Int?
  unservicedWasteDisposalId          Int?
  wastePaymentEvidenceId             Int?
  wasteContainerVolumeId             Int?
  wasteProviderAccredittedId         Int?
  containerNumber                    Int?
  containerServiceProviderName       Int?
  scheduleLiftingId                  Int?
  sanitaryContainerId                Int?
  rating                             Int?
  wasteServicePhoneNumber            String?
  isCompleted                        Int?                             @default(1)
  isSubmitted                        Int?                             @default(1)
  deleted                            Int?                             @default(0)
  createdAt                          DateTime                         @default(now())
  updatedAt                          DateTime                         @updatedAt
  PremisesHazardousWasteDisposal     PremisesHazardousWasteDisposal[]
  // PremisesWasteCollection            PremisesWasteCollection[]
  PremisesWasteReceptacle            PremisesWasteReceptacle[]
  adequateWasteStorageReceptacle     YesNo?                           @relation("adequateWasteStorageReceptacle", fields: [adequateWasteStorageReceptacleId], references: [id])
  approvedWasteStorageReceptacle     YesNo?                           @relation("approvedWasteStorageReceptacle", fields: [approvedWasteStorageReceptacleId], references: [id])
  Inspection                         Inspection                       @relation(fields: [inspectionId], references: [id])
  User                               User                             @relation(fields: [userId], references: [id])
  wasteCollectionFrequency           WasteCollectionFrequency?        @relation(fields: [wasteCollectionFrequencyId], references: [id])
  wastePaymentEvidence               YesNo?                           @relation("wastePaymentEvidence", fields: [wastePaymentEvidenceId], references: [id])
  wasteServiceProviderRegistration   YesNo?                           @relation("wasteServiceProviderRegistration", fields: [wasteServiceProviderRegistrationId], references: [id])
  wasteSortingAvailability           YesNo?                           @relation("wasteSortingAvailability", fields: [wasteSortingAvailabilityId], references: [id])
  wasteProviderAccreditted           YesNo?                           @relation("wasteProviderAccreditted", fields: [wasteProviderAccredittedId], references: [id])
  sanitaryContainer                  SanitaryInsanitary?              @relation("sanitaryContainer", fields: [sanitaryContainerId], references: [id])
  scheduleLifting                    YesNo?                           @relation("scheduleLifting", fields: [scheduleLiftingId], references: [id])

  WasteCollectionType                WasteCollectionType?                 @relation(fields: [wasteCollectionTypeId], references: [id])
  UnservicedWasteDisposal            UnservicedWasteDisposal?             @relation(fields: [unservicedWasteDisposalId], references: [id])
  ContainerVolume                    ContainerVolume?                     @relation(fields: [wasteContainerVolumeId], references: [id])
  PremisesCommunalContainerCondition PremisesCommunalContainerCondition[]
}

model SolidWasteSectionHistory {
  newId Int @id @default(autoincrement())

  id                                 String   @db.VarChar(255)
  inspectionId                       String   @db.VarChar(255)
  userId                             Int
  wasteServiceProviderRegistrationId Int?
  wasteCollectorName                 String?
  wasteSortingAvailabilityId         Int?
  wasteCollectionFrequencyId         Int?
  approvedWasteStorageReceptacleId   Int?
  adequateWasteStorageReceptacleId   Int?
  wasteCollectionTypeId              Int?
  unservicedWasteDisposalId          Int?
  wastePaymentEvidenceId             Int?
  wasteContainerVolumeId             Int?
  wasteProviderAccredittedId         Int?
  containerNumber                    Int?
  containerServiceProviderName       Int?
  scheduleLiftingId                  Int?
  sanitaryContainerId                Int?
  rating                             Int?
  wasteServicePhoneNumber            String?
  isCompleted                        Int?     @default(1)
  isSubmitted                        Int?     @default(1)
  deleted                            Int?     @default(0)
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @updatedAt

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model ConclusionSection {
  id                    String @id @db.VarChar(255)
  inspectionId          String @unique @db.VarChar(255)
  userId                Int
  obnoxiousTradeExistId Int?
  officerComment        String @db.VarChar(255)
  obnoxiousTrade        String @db.VarChar(255)
  isNuisanceObservedId  Int?
  deleted               Int?   @default(0)

  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  Inspection               Inspection                 @relation(fields: [inspectionId], references: [id])
  obnoxiousTradeExist      YesNo?                     @relation("obnoxiousTradeExist", fields: [obnoxiousTradeExistId], references: [id])
  isCompleted              Int?                       @default(1)
  isSubmitted              Int?                       @default(1)
  User                     User                       @relation(fields: [userId], references: [id])
  PremisesActionTaken      PremisesActionTaken[]
  PremisesNuisanceDetected PremisesNuisanceDetected[]
}

model ConclusionSectionHistory {
  newId Int @id @default(autoincrement())

  id                    String @db.VarChar(255)
  inspectionId          String @db.VarChar(255)
  userId                Int
  obnoxiousTradeExistId Int?
  officerComment        String @db.VarChar(255)
  obnoxiousTrade        String @db.VarChar(255)
  isNuisanceObservedId  Int?
  deleted               Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

/// /////////////////PREMISES MULTI SELECTIONS SECTION ///////////
model PremisesWaterSources {
  id             String @id @db.VarChar(255)
  inspectionId   String @db.VarChar(255)
  waterSectionId String @db.VarChar(255)
  waterSourceId  Int
  deleted        Int?   @default(0)
  isCompleted    Int?   @default(1)
  isSubmitted    Int?   @default(1)

  Inspection Inspection @relation(fields: [inspectionId], references: [id])

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          Int
  User            User            @relation(fields: [userId], references: [id])
  WaterSection    WaterSection    @relation(fields: [waterSectionId], references: [id])
  WaterSourceType WaterSourceType @relation(fields: [waterSourceId], references: [id])
}

model PremisesWaterSourcesHistory {
  newId Int @id @default(autoincrement())

  id             String @db.VarChar(255)
  inspectionId   String @db.VarChar(255)
  waterSectionId String @db.VarChar(255)
  waterSourceId  Int
  deleted        Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesWaterTreatmentType {
  id                   String             @id @db.VarChar(255)
  inspectionId         String             @db.VarChar(255)
  waterSectionId       String             @db.VarChar(255)
  waterTreatmentTypeId Int
  deleted              Int?               @default(0)
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  User                 User               @relation(fields: [userId], references: [id])
  WaterSection         WaterSection       @relation(fields: [waterSectionId], references: [id])
  WaterTreatmentType   WaterTreatmentType @relation(fields: [waterTreatmentTypeId], references: [id])
}

model PremisesWaterTreatmentTypeHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  waterSectionId       String @db.VarChar(255)
  waterTreatmentTypeId Int
  deleted              Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesWaterSupply {
  id              String          @id @db.VarChar(255)
  inspectionId    String          @db.VarChar(255)
  waterSectionId  String          @db.VarChar(255)
  waterSupplyId   Int
  deleted         Int?            @default(0)
  createdAt       DateTime        @default(now())
  Inspection      Inspection      @relation(fields: [inspectionId], references: [id])
  updatedAt       DateTime        @updatedAt
  userId          Int
  isCompleted     Int?            @default(1)
  isSubmitted     Int?            @default(1)
  User            User            @relation(fields: [userId], references: [id])
  WaterSection    WaterSection    @relation(fields: [waterSectionId], references: [id])
  WaterSupplyType WaterSupplyType @relation(fields: [waterSupplyId], references: [id])
}

model PremisesWaterSupplyHistory {
  newId Int @id @default(autoincrement())

  id             String   @db.VarChar(255)
  inspectionId   String   @db.VarChar(255)
  waterSectionId String   @db.VarChar(255)
  waterSupplyId  Int
  deleted        Int?     @default(0)
  createdAt      DateTime @default(now())

  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesWaterStorage {
  id                 String           @id @db.VarChar(255)
  inspectionId       String           @db.VarChar(255)
  waterSectionId     String           @db.VarChar(255)
  waterStorageTypeId Int
  deleted            Int?             @default(0)
  Inspection         Inspection       @relation(fields: [inspectionId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             Int
  isCompleted        Int?             @default(1)
  isSubmitted        Int?             @default(1)
  User               User             @relation(fields: [userId], references: [id])
  WaterSection       WaterSection     @relation(fields: [waterSectionId], references: [id])
  WaterStorageType   WaterStorageType @relation(fields: [waterStorageTypeId], references: [id])
}

model PremisesWaterStorageHistory {
  newId Int @id @default(autoincrement())

  id                 String @db.VarChar(255)
  inspectionId       String @db.VarChar(255)
  waterSectionId     String @db.VarChar(255)
  waterStorageTypeId Int
  deleted            Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesUnsafeWaterStorage {
  id                   String             @id @db.VarChar(255)
  inspectionId         String             @db.VarChar(255)
  waterSectionId       String             @db.VarChar(255)
  deleted              Int?               @default(0)
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               Int
  waterStorageTypeId   Int?
  unsafeWaterStorageId Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  User                 User               @relation(fields: [userId], references: [id])
  WaterSection         WaterSection       @relation(fields: [waterSectionId], references: [id])
  UnsafeWaterStorage   UnsafeWaterStorage @relation(fields: [unsafeWaterStorageId], references: [id])
  WaterStorageType     WaterStorageType?  @relation(fields: [waterStorageTypeId], references: [id])
}

model PremisesUnsafeWaterStorageHistory {
  newId Int @id @default(autoincrement())

  id             String @db.VarChar(255)
  inspectionId   String @db.VarChar(255)
  waterSectionId String @db.VarChar(255)
  deleted        Int?   @default(0)

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  userId               Int
  waterStorageTypeId   Int?
  unsafeWaterStorageId Int
  isCompleted          Int?              @default(1)
  isSubmitted          Int?              @default(1)
  // InspectionHistory    InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory    InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId            Int
}

model PremisesCommunalContainerCondition {
  id                           String                     @id @db.VarChar(255)
  inspectionId                 String                     @db.VarChar(255)
  deleted                      Int?                       @default(0)
  createdAt                    DateTime                   @default(now())
  communalContainerConditionId Int
  solidWasteSectionId          String                     @db.VarChar(255)
  updatedAt                    DateTime                   @updatedAt
  userId                       Int
  isCompleted                  Int?                       @default(1)
  isSubmitted                  Int?                       @default(1)
  User                         User                       @relation(fields: [userId], references: [id])
  CommunalContainerCondition   CommunalContainerCondition @relation(fields: [communalContainerConditionId], references: [id])
  SolidWasteSection            SolidWasteSection          @relation(fields: [solidWasteSectionId], references: [id])
  Inspection                   Inspection                 @relation(fields: [inspectionId], references: [id])
}

model PremisesCommunalContainerConditionHistory {
  newId Int @id @default(autoincrement())

  id                           String            @db.VarChar(255)
  inspectionId                 String            @db.VarChar(255)
  deleted                      Int?              @default(0)
  createdAt                    DateTime          @default(now())
  communalContainerConditionId Int
  solidWasteSectionId          String            @db.VarChar(255)
  updatedAt                    DateTime          @updatedAt
  userId                       Int
  isCompleted                  Int?              @default(1)
  isSubmitted                  Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory            InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId                    Int
}

model PremisesDrinkingWaterSources {
  id                    String @id @db.VarChar(255)
  inspectionId          String @db.VarChar(255)
  waterSectionId        String @db.VarChar(255)
  drinkingWaterSourceId Int
  deleted               Int?   @default(0)

  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  userId                  Int
  isCompleted             Int?                    @default(1)
  isSubmitted             Int?                    @default(1)
  DrinkingWaterSourceType DrinkingWaterSourceType @relation(fields: [drinkingWaterSourceId], references: [id])
  User                    User                    @relation(fields: [userId], references: [id])
  WaterSection            WaterSection            @relation(fields: [waterSectionId], references: [id])
  Inspection              Inspection              @relation(fields: [inspectionId], references: [id])
}

model PremisesDrinkingWaterSourcesHistory {
  newId Int @id @default(autoincrement())

  id                    String @db.VarChar(255)
  inspectionId          String @db.VarChar(255)
  waterSectionId        String @db.VarChar(255)
  drinkingWaterSourceId Int
  deleted               Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesToiletType {
  id           String @id @db.VarChar(255)
  inspectionId String @db.VarChar(255)

  deleted              Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  liquidWasteSectionId String             @db.VarChar(255)
  toiletTypeId         Int
  userId               Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  LiquidWasteSection   LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  ToiletType           ToiletType         @relation(fields: [toiletTypeId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
}

model PremisesToiletTypeHistory {
  newId Int @id @default(autoincrement())

  id           String @db.VarChar(255)
  inspectionId String @db.VarChar(255)

  deleted              Int?              @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  liquidWasteSectionId String            @db.VarChar(255)
  toiletTypeId         Int
  userId               Int
  isCompleted          Int?              @default(1)
  isSubmitted          Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory    InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId            Int
}

model PremisesEffluentManagement {
  id                   String @id @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  effluentManagementId Int
  liquidWasteSectionId String @db.VarChar(255)

  deleted            Int?               @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             Int
  isCompleted        Int?               @default(1)
  isSubmitted        Int?               @default(1)
  EffluentManagement EffluentManagement @relation(fields: [effluentManagementId], references: [id])
  LiquidWasteSection LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  User               User               @relation(fields: [userId], references: [id])

  Inspection Inspection @relation(fields: [inspectionId], references: [id])
}

model PremisesEffluentManagementHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  effluentManagementId Int
  liquidWasteSectionId String @db.VarChar(255)

  deleted           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesExcretaDisposalMethod {
  id                   String @id @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted                 Int?                  @default(0)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  excretaDisposalMethodId Int
  userId                  Int
  isCompleted             Int?                  @default(1)
  isSubmitted             Int?                  @default(1)
  ExcretaDisposalMethod   ExcretaDisposalMethod @relation(fields: [excretaDisposalMethodId], references: [id])
  LiquidWasteSection      LiquidWasteSection    @relation(fields: [liquidWasteSectionId], references: [id])
  User                    User                  @relation(fields: [userId], references: [id])
  Inspection              Inspection            @relation(fields: [inspectionId], references: [id])
}

model PremisesExcretaDisposalMethodHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted                 Int?              @default(0)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  excretaDisposalMethodId Int
  userId                  Int
  isCompleted             Int?              @default(1)
  isSubmitted             Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory       InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId               Int
}

model PremisesExcretaContainment {
  id                   String @id @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted              Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  excretaContainmentId Int
  userId               Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  ExcretaContainment   ExcretaContainment @relation(fields: [excretaContainmentId], references: [id])
  LiquidWasteSection   LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
}

model PremisesExcretaContainmentHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted              Int?              @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  excretaContainmentId Int
  userId               Int
  isCompleted          Int?              @default(1)
  isSubmitted          Int?              @default(1)
  // InspectionHistory    InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory    InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId            Int
}

model PremisesGreyWaterDisposal {
  id                   String @id @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted             Int?               @default(0)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  greyWaterDisposalId Int
  userId              Int
  isCompleted         Int?               @default(1)
  isSubmitted         Int?               @default(1)
  GreyWaterDisposal   GreyWaterDisposal  @relation(fields: [greyWaterDisposalId], references: [id])
  LiquidWasteSection  LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  User                User               @relation(fields: [userId], references: [id])
  Inspection          Inspection         @relation(fields: [inspectionId], references: [id])
}

model PremisesGreyWaterDisposalHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)

  deleted             Int?     @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  greyWaterDisposalId Int
  userId              Int
  isCompleted         Int?     @default(1)
  isSubmitted         Int?     @default(1)

  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesWasteReceptacle {
  id                     String               @id @db.VarChar(255)
  inspectionId           String               @db.VarChar(255)
  solidWasteReceptacleId Int
  Inspection             Inspection           @relation(fields: [inspectionId], references: [id])
  deleted                Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  solidWasteSectionId    String               @db.VarChar(255)
  userId                 Int
  isCompleted            Int?                 @default(1)
  isSubmitted            Int?                 @default(1)
  SolidWasteReceptacle   SolidWasteReceptacle @relation(fields: [solidWasteReceptacleId], references: [id])
  SolidWasteSection      SolidWasteSection    @relation(fields: [solidWasteSectionId], references: [id])
  User                   User                 @relation(fields: [userId], references: [id])
}

model PremisesWasteReceptacleHistory {
  newId Int @id @default(autoincrement())

  id                     String @db.VarChar(255)
  inspectionId           String @db.VarChar(255)
  solidWasteReceptacleId Int

  deleted             Int?              @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  solidWasteSectionId String            @db.VarChar(255)
  userId              Int
  isCompleted         Int?              @default(1)
  isSubmitted         Int?              @default(1)
  // InspectionHistory   InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory   InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId           Int
}

// model PremisesWasteCollection {
//   id                    String              @id @db.VarChar(255)
//   wasteCollectionTypeId Int
//   deleted               Int?                @default(0)
//   createdAt             DateTime            @default(now())
//   updatedAt             DateTime            @updatedAt
//   solidWasteSectionId   String              @db.VarChar(255)
//   userId                Int
//   SolidWasteSection     SolidWasteSection   @relation(fields: [solidWasteSectionId], references: [id])
//   User                  User                @relation(fields: [userId], references: [id])
//   WasteCollectionType   WasteCollectionType @relation(fields: [wasteCollectionTypeId], references: [id])
// }

model PremisesPestSigns {
  id           String     @id @db.VarChar(255)
  pestSignId   Int
  deleted      Int?       @default(0)
  Inspection   Inspection @relation(fields: [inspectionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       Int
  isCompleted  Int?       @default(1)
  isSubmitted  Int?       @default(1)
  PestSign     PestSign   @relation(fields: [pestSignId], references: [id])
  User         User       @relation(fields: [userId], references: [id])
  inspectionId String     @db.VarChar(255)
}

model PremisesPestSignsHistory {
  newId Int @id @default(autoincrement())

  id                String            @db.VarChar(255)
  pestSignId        Int
  deleted           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  inspectionId      String            @db.VarChar(255)
  // InspectionHistory InspectionHistory? @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
}

model PremisesAnimal {
  id                               String                         @id @db.VarChar(255)
  inspectionId                     String                         @db.VarChar(255)
  animalTypeId                     Int
  residentialPremisesInfoSectionId String                         @db.VarChar(255)
  deleted                          Int?                           @default(0)
  Inspection                       Inspection                     @relation(fields: [inspectionId], references: [id])
  createdAt                        DateTime                       @default(now())
  updatedAt                        DateTime                       @updatedAt
  userId                           Int
  isCompleted                      Int?                           @default(1)
  isSubmitted                      Int?                           @default(1)
  AnimalType                       AnimalType                     @relation(fields: [animalTypeId], references: [id])
  ResidentialPremisesInfoSection   ResidentialPremisesInfoSection @relation(fields: [residentialPremisesInfoSectionId], references: [id])
  User                             User                           @relation(fields: [userId], references: [id])
}

model PremisesAnimalHistory {
  newId Int @id @default(autoincrement())

  id                               String @db.VarChar(255)
  inspectionId                     String @db.VarChar(255)
  animalTypeId                     Int
  residentialPremisesInfoSectionId String @db.VarChar(255)
  deleted                          Int?   @default(0)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesDrainType {
  id                   String             @id @db.VarChar(255)
  inspectionId         String             @db.VarChar(255)
  drainTypeId          Int
  liquidWasteSectionId String             @db.VarChar(255)
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
  deleted              Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  DrainType            DrainType          @relation(fields: [drainTypeId], references: [id])
  LiquidWasteSection   LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])
}

model PremisesDrainTypeHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  drainTypeId          Int
  liquidWasteSectionId String @db.VarChar(255)

  deleted           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  //InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesDrainBadCondition {
  id                   String             @id @db.VarChar(255)
  inspectionId         String             @db.VarChar(255)
  liquidWasteSectionId String             @db.VarChar(255)
  deleted              Int?               @default(0)
  drainBadConditionId  Int
  Inspection           Inspection         @relation(fields: [inspectionId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userId               Int
  isCompleted          Int?               @default(1)
  isSubmitted          Int?               @default(1)
  DrainBadCondition    DrainBadCondition  @relation(fields: [drainBadConditionId], references: [id])
  LiquidWasteSection   LiquidWasteSection @relation(fields: [liquidWasteSectionId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])
}

model PremisesDrainBadConditionHistory {
  newId Int @id @default(autoincrement())

  id                   String @db.VarChar(255)
  inspectionId         String @db.VarChar(255)
  liquidWasteSectionId String @db.VarChar(255)
  deleted              Int?   @default(0)
  drainBadConditionId  Int

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesHazardousWasteDisposal {
  id                             String                       @id @db.VarChar(255)
  inspectionId                   String                       @db.VarChar(255)
  hazardousWasteDisposalMethodId Int
  solidWasteSectionId            String                       @db.VarChar(255)
  Inspection                     Inspection                   @relation(fields: [inspectionId], references: [id])
  deleted                        Int?                         @default(0)
  createdAt                      DateTime                     @default(now())
  updatedAt                      DateTime                     @updatedAt
  userId                         Int
  isCompleted                    Int?                         @default(1)
  isSubmitted                    Int?                         @default(1)
  HazardousWasteDisposalMethod   HazardousWasteDisposalMethod @relation(fields: [hazardousWasteDisposalMethodId], references: [id])
  SolidWasteSection              SolidWasteSection            @relation(fields: [solidWasteSectionId], references: [id])
  User                           User                         @relation(fields: [userId], references: [id])
}

model PremisesHazardousWasteDisposalHistory {
  newId Int @id @default(autoincrement())

  id                             String @db.VarChar(255)
  inspectionId                   String @db.VarChar(255)
  hazardousWasteDisposalMethodId Int
  solidWasteSectionId            String @db.VarChar(255)

  deleted           Int?              @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int
  isCompleted       Int?              @default(1)
  isSubmitted       Int?              @default(1)
  // InspectionHistory InspectionHistory @relation(fields: [inspectionId], references: [id])
  InspectionHistory InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId         Int
}

model PremisesActionTaken {
  id                  String             @id @db.VarChar(255)
  inspectionId        String             @db.VarChar(255)
  actionId            Int
  conclusionSectionId String?            @db.VarChar(255)
  deleted             Int?               @default(0)
  Inspection          Inspection         @relation(fields: [inspectionId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userId              Int
  isCompleted         Int?               @default(1)
  isSubmitted         Int?               @default(1)
  Action              Action             @relation(fields: [actionId], references: [id])
  ConclusionSection   ConclusionSection? @relation(fields: [conclusionSectionId], references: [id])
  User                User               @relation(fields: [userId], references: [id])
}

model PremisesActionTakenHistory {
  newId Int @id @default(autoincrement())

  id                  String            @db.VarChar(255)
  inspectionId        String            @db.VarChar(255)
  actionId            Int
  conclusionSectionId String?           @db.VarChar(255)
  deleted             Int?              @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  userId              Int
  isCompleted         Int?              @default(1)
  isSubmitted         Int?              @default(1)
  InspectionHistory   InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId           Int
}

model PremisesNuisanceDetected {
  id                  String            @id @db.VarChar(255)
  inspectionId        String            @db.VarChar(255)
  deleted             Int?              @default(0)
  Inspection          Inspection        @relation(fields: [inspectionId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  conclusionSectionId String            @db.VarChar(255)
  nuisanceId          Int
  userId              Int
  isCompleted         Int?              @default(1)
  isSubmitted         Int?              @default(1)
  ConclusionSection   ConclusionSection @relation(fields: [conclusionSectionId], references: [id])
  Nuisance            Nuisance          @relation(fields: [nuisanceId], references: [id])
  User                User              @relation(fields: [userId], references: [id])
}

model PremisesNuisanceDetectedHistory {
  newId Int @id @default(autoincrement())

  id                  String            @db.VarChar(255)
  inspectionId        String            @db.VarChar(255)
  deleted             Int?              @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  conclusionSectionId String            @db.VarChar(255)
  nuisanceId          Int
  userId              Int
  isCompleted         Int?              @default(1)
  isSubmitted         Int?              @default(1)
  InspectionHistory   InspectionHistory @relation(fields: [historyId], references: [historyId])
  historyId           Int
}

model FollowupPremisesActionTaken {
  id           String @id @db.VarChar(255)
  inspectionId String @db.VarChar(255)
  actionId     Int
  deleted      Int?   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  Action    Action   @relation(fields: [actionId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model FollowupPremisesNuisanceDetected {
  id           String @id @db.VarChar(255)
  inspectionId String @db.VarChar(255)
  deleted      Int?   @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nuisanceId Int
  userId     Int
  Nuisance   Nuisance @relation(fields: [nuisanceId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
}

model SanitationReport {
  id    Int     @id @default(autoincrement())

  community    String? @db.VarChar(255)
  image        String  @db.VarChar(255)
  districtId   Int?
  reportTypeId Int?

  description String? @db.VarChar(255)

  latitude  Decimal? @db.Decimal(11, 8)
  longitude Decimal? @db.Decimal(11, 8)
  status    Int?     @default(0)

  deleted                Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  District               District?            @relation(fields: [districtId], references: [id])
  ReportType             ReportType?          @relation(fields: [reportTypeId], references: [id])
  SanitationReportUser   SanitationReportUser @relation(fields: [sanitationReportUserId], references: [id])
  sanitationReportUserId Int
}

model SanitationReportUser {
  id          Int     @id @default(autoincrement())
  fcmId       String? @db.VarChar(255)
  fullName    String? @db.VarChar(255)
  phoneNumber String? @db.VarChar(255) @unique
  email       String? @db.VarChar(255) @unique

  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SanitationReport SanitationReport[]
}

model ReportType {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  deleted          Int?               @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  SanitationReport SanitationReport[]
}

model FileType {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(255)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserGuide UserGuide[]
}

model UserGuide {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  url         String  @db.VarChar(255) //youtube,web link
  description String? @db.Text
  fileTypeId  Int

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  FileType  FileType @relation(fields: [fileTypeId], references: [id])
}

model FormSectionImage {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  deleted                    Int?                         @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  InspectionPictures         InspectionPictures[]
  FollowUpInspectionPictures FollowUpInspectionPictures[]
}

// int isNotApplicable;
// String inspectionId;
// int type;
// int? deleted;
// DateTime? createdAt;
// DateTime? updatedAt;

model NotApplicable {
  id           String @id
  inspectionId String @db.VarChar(255)
  userId       Int

  isNotApplicable Int
  type            Int
  deleted         Int? @default(0)

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Inspection Inspection @relation(fields: [inspectionId], references: [id])
  User       User       @relation(fields: [userId], references: [id])
}

model InspectionPictures {
  id                 Int    @id @default(autoincrement())
  imagePath          String @db.VarChar(255)
  formSectionImageId Int
  inspectionId       String @db.VarChar(255)

  deleted          Int?             @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Inspection       Inspection       @relation(fields: [inspectionId], references: [id])
  FormSectionImage FormSectionImage @relation(fields: [formSectionImageId], references: [id])

  @@unique([formSectionImageId, inspectionId], name: "inspectionFormSectionImage")
}

model FollowUpInspectionPictures {
  id                 Int    @id @default(autoincrement())
  imagePath          String @db.VarChar(255)
  formSectionImageId Int

  deleted                     Int?                       @default(0)
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @updatedAt
  FormSectionImage            FormSectionImage           @relation(fields: [formSectionImageId], references: [id])
  FollowUpInspection          FollowUpInspection         @relation(fields: [followUpInspectionId], references: [id])
  followUpInspectionId        String                     @db.VarChar(255)
  FollowUpInspectionHistory   FollowUpInspectionHistory? @relation(fields: [followUpInspectionHistoryId], references: [id])
  followUpInspectionHistoryId String?                    @db.VarChar(255)

  @@unique([formSectionImageId, followUpInspectionId], name: "inspectionFormSectionImage")
}

model AssignData {
  id      Int  @id @default(autoincrement())
  deleted Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedTo   User @relation("assignedTo", fields: [assignedToId], references: [id])
  assignedToId Int

  assignedFrom   User @relation("assignedFrom", fields: [assignedFromId], references: [id])
  assignedFromId Int
  User           User @relation(fields: [userId], references: [id])
  userId         Int
}

model FollowUpInspection {
  id String @id @db.VarChar(255)

  prevInspectionId String? @unique @db.VarChar(255)
  premisesCode     String? @db.VarChar(255)

  userId                  Int
  inspectionFormId        Int
  districtId              Int
  regionId                Int
  communityId             Int
  community               String         @db.VarChar(255)
  electoralAreaId         Int
  electoralArea           String         @db.VarChar(255)
  ghanaPostGps            String?        @db.VarChar(255)
  latitude                String         @db.VarChar(255)
  longitude               String         @db.VarChar(255)
  accuracy                String         @db.VarChar(255)
  respondentName          String         @db.VarChar(255)
  respondentPhoneNumber   String         @db.VarChar(255)
  respondentDesignationId Int
  waterRating             String         @db.VarChar(255)
  solidWasteRating        String         @db.VarChar(255)
  liquidWasteRating       String         @db.VarChar(255)
  totalRating             String         @db.VarChar(255)
  isCompleted             Int?           @default(1)
  isSubmitted             Int?           @default(1)
  InspectionForm          InspectionForm @relation(fields: [inspectionFormId], references: [id])

  obnoxiousTradeExistFollowUpId Int
  obnoxiousTrade                String @db.VarChar(255)
  officerComment                String @db.VarChar(255)

  isNuisanceObservedId Int?
  updated              Int? @default(0)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Inspection Inspection? @relation(fields: [prevInspectionId], references: [id])

  obnoxiousTradeExistFollowUp YesNo @relation("obnoxiousTradeExistFollowUp", fields: [obnoxiousTradeExistFollowUpId], references: [id])

  isNuisanceObserved         YesNo?                       @relation("isNuisanceObserved", fields: [isNuisanceObservedId], references: [id])
  FollowUpInspectionPictures FollowUpInspectionPictures[]
}

model FollowUpInspectionHistory {
  id String @id @db.VarChar(255)

  prevInspectionId String? @unique @db.VarChar(255)
  premisesCode     String? @db.VarChar(255)

  userId                  Int
  inspectionFormId        Int
  districtId              Int
  regionId                Int
  communityId             Int
  community               String         @db.VarChar(255)
  electoralAreaId         Int
  electoralArea           String         @db.VarChar(255)
  ghanaPostGps            String?        @db.VarChar(255)
  latitude                String         @db.VarChar(255)
  longitude               String         @db.VarChar(255)
  accuracy                String         @db.VarChar(255)
  respondentName          String         @db.VarChar(255)
  respondentPhoneNumber   String         @db.VarChar(255)
  respondentDesignationId Int
  waterRating             String         @db.VarChar(255)
  solidWasteRating        String         @db.VarChar(255)
  liquidWasteRating       String         @db.VarChar(255)
  totalRating             String         @db.VarChar(255)
  isCompleted             Int?           @default(1)
  isSubmitted             Int?           @default(1)
  InspectionForm          InspectionForm @relation(fields: [inspectionFormId], references: [id])

  obnoxiousTradeExistFollowUpHistoryId Int
  obnoxiousTrade                       String @db.VarChar(255)
  officerComment                       String @db.VarChar(255)

  isNuisanceObservedFollowUpHistoryId Int?
  updated                             Int? @default(0)

  deleted   Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Inspection Inspection? @relation(fields: [prevInspectionId], references: [id])

  obnoxiousTradeExistFollowUpHistory YesNo @relation("obnoxiousTradeExistFollowUpHistory", fields: [obnoxiousTradeExistFollowUpHistoryId], references: [id])

  isNuisanceObservedFollowUpHistory YesNo?                       @relation("isNuisanceObservedFollowUpHistory", fields: [isNuisanceObservedFollowUpHistoryId], references: [id])
  FollowUpInspectionPictures        FollowUpInspectionPictures[]
  YesNo                             YesNo?                       @relation(fields: [yesNoId], references: [id])
  yesNoId                           Int?
}

//reset internal autoincrement id
//SELECT setval(pg_get_serial_sequence('"District"', 'id'), coalesce(max(id)+1, 1), false) FROM "District";
